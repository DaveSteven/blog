{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/observer_img1.png","path":"images/observer_img1.png","modified":1,"renderable":0},{"_id":"source/images/observer_img2.png","path":"images/observer_img2.png","modified":1,"renderable":0},{"_id":"source/images/reactivity.png","path":"images/reactivity.png","modified":1,"renderable":0},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/avatar.png","path":"uploads/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/keep_alive.gif","path":"images/keep_alive.gif","modified":1,"renderable":0},{"_id":"source/images/keep_alive3.gif","path":"images/keep_alive3.gif","modified":1,"renderable":0},{"_id":"source/images/keep_alive2.gif","path":"images/keep_alive2.gif","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"9bac802a36f0aa32da64ba42afb6ff2912e3b010","modified":1528283545830},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1515072990000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1515072990000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1515072990000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1515072990000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1515072990000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1515072990000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1515072990000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1515072990000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1515072990000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1515072990000},{"_id":"themes/next/README.cn.md","hash":"5d8af3d8de8d3926126a738519e97c8442b0effe","modified":1515072990000},{"_id":"themes/next/README.md","hash":"44b28d995681a7c48bfe3d0577d6203812d07e59","modified":1515072990000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1515072990000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1515072990000},{"_id":"themes/next/_config.yml","hash":"d8fb397f88e1dda69de283c079a24cd31d08fbca","modified":1530004469701},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1515072990000},{"_id":"source/_posts/vue开发音乐APP学习总结(三).md","hash":"2f96d442e0e36032ae689637998ecc96941b59b9","modified":1530700546537},{"_id":"source/_posts/vue开发音乐APP学习总结(一).md","hash":"fceed883a6b63cec0d8b7b862f26cee089af00a8","modified":1530070795937},{"_id":"source/_posts/观察者模式.md","hash":"0bd94e80acb24fd5c6d723c3a35c984e246740e8","modified":1530788620624},{"_id":"source/_posts/IE下URL中文参数乱码问题.md","hash":"8ba758989bf7743483b91642236798c308b4788c","modified":1530761562266},{"_id":"source/_posts/Javascript中的this关键字(一).md","hash":"b06a91c30a8a393e2f08d7ef655d85b86bc121f2","modified":1530756956954},{"_id":"source/categories/index.md","hash":"8285da02d352e1ef91e412841cb8c5f8dc098848","modified":1529924559600},{"_id":"source/_posts/vue开发音乐APP学习总结(二).md","hash":"3b74dabf8a31814eb5c1f5422d407202c45d8eeb","modified":1530758995811},{"_id":"source/images/observer_img1.png","hash":"e9f8fa0392e1548d3f6174a26bf9db06f27ea525","modified":1530761711916},{"_id":"source/images/observer_img2.png","hash":"a8de7d104af921bc167b19cee7cd0d165d72769a","modified":1530778323262},{"_id":"source/tags/index.md","hash":"758f0b07d522e263a9059e4e064887c0009228cd","modified":1529924604402},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1515072990000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1515072990000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1515072990000},{"_id":"source/images/reactivity.png","hash":"7071337f9071f93ebf85639ede38b0f40fd75d98","modified":1529912364167},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1515072990000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1515072990000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1515072990000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1515072990000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1515072990000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1515072990000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1515072990000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1515072990000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1515072990000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1515072990000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1515072990000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1515072990000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1515072990000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1515072990000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1515072990000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1515072990000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1515072990000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1515072990000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1515072990000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1515072990000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1515072990000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1515072990000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1515072990000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1515072990000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1515072990000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1515072990000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1515072990000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1515072990000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1515072990000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1515072990000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515072990000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1515072990000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1515072990000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1515072990000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1515072990000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1515072990000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1515072990000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1515072990000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1515072990000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1515072990000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1515072990000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1515072990000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1515072990000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1515072990000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1515072990000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1515072990000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1515072990000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1515072990000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1515072990000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1515072990000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1515072990000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1515072990000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1515072990000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1515072990000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1515072990000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1515072990000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1515072990000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1515072990000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1515072990000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1515072990000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1515072990000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1515072990000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1515072990000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1515072990000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1515072990000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1515072990000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1515072990000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1515072990000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1515072990000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1515072990000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1515072990000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1515072990000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1515072990000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1515072990000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1515072990000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1515072990000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1515072990000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1515072990000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1515072990000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1515072990000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1515072990000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1515072990000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1515072990000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1515072990000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515072990000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515072990000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515072990000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515072990000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515072990000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515072990000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515072990000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1515072990000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1515072990000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1515072990000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1515072990000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1515072990000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1515072990000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1515072990000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1515072990000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1515072990000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1515072990000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1515072990000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1515072990000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1515072990000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1515072990000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1515072990000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1515072990000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1515072990000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1515072990000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1515072990000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1515072990000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1515072990000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1515072990000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1515072990000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1515072990000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1515072990000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1515072990000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"a1104c4e479101741003bc6dce07c1540194554c","modified":1529984204678},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1515072990000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1515072990000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1515072990000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1515072990000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1515072990000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1515072990000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1515072990000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1515072990000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1515072990000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1515072990000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1515072990000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1515072990000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1515072990000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1515072990000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1515072990000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1515072990000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1515072990000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1515072990000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1515072990000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1515072990000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1515072990000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1515072990000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1515072990000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1515072990000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1515072990000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1515072990000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1515072990000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1515072990000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1515072990000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1515072990000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1515072990000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1515072990000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1515072990000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1515072990000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1515072990000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1515072990000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1515072990000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1515072990000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1515072990000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1515072990000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1515072990000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1515072990000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1515072990000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1515072990000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1515072990000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1515072990000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1515072990000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1515072990000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1515072990000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1515072990000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1515072990000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1515072990000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1515072990000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1515072990000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1515072990000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1515072990000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1515072990000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1515072990000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1515072990000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1515072990000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1515072990000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1515072990000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1515072990000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1515072990000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1515072990000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1515072990000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1515072990000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1515072990000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1515072990000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1515072990000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1515072990000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1515072990000},{"_id":"themes/next/source/uploads/avatar.png","hash":"924935cc0dc457f385601c0d47c4ac4a8bce26c6","modified":1529914291884},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1515072990000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1515072990000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1515072990000},{"_id":"source/images/keep_alive.gif","hash":"b5167d3756569c2ec726cd4a0f75741e8ef84d71","modified":1529999026970},{"_id":"source/images/keep_alive3.gif","hash":"16d7d49fcdb6fd0d02f00a4b334432e99da7b7ba","modified":1530001395712},{"_id":"source/images/keep_alive2.gif","hash":"4048f413e1f493fc9098082fb7f0ce794d960a12","modified":1529999998001},{"_id":"public/categories/index.html","hash":"4033c542520282d7b4b2dedb897f2814d0e3f2a4","modified":1530788633687},{"_id":"public/tags/index.html","hash":"498ec3a8b9290db6ff57ab38ace7bae71ebc12a6","modified":1530788633687},{"_id":"public/archives/index.html","hash":"cf0e3fd21cb7e322ee01e3f7664266d5399a29bd","modified":1530788633687},{"_id":"public/archives/2018/index.html","hash":"aff02e953c1698b16a4ca1723499edfb81188362","modified":1530788633687},{"_id":"public/archives/2018/06/index.html","hash":"5f366794bc45bbc7e84468183aebad6776596c7b","modified":1530788633688},{"_id":"public/archives/2018/07/index.html","hash":"7a4789272f562959317a9adcf74d022b77c9ad95","modified":1530788633688},{"_id":"public/categories/Front-End/index.html","hash":"1e5f7541f21d31e1664c4a49abe78a97b229e5cf","modified":1530788633688},{"_id":"public/tags/Vue-js/index.html","hash":"69005dd4466b59fe597cadb1442c7065db2cfcfd","modified":1530788633688},{"_id":"public/tags/Javascript/index.html","hash":"484dcf02fac7f973bbd613072ee038d152cd1989","modified":1530788633688},{"_id":"public/tags/encodeURI/index.html","hash":"2ab3886ec23252be6ec0c737a703c6960d78d6c1","modified":1530788633688},{"_id":"public/2018/07/05/观察者模式/index.html","hash":"54a080218f67a7e91975bedfec3a7f03fce3021f","modified":1530788633688},{"_id":"public/2018/07/04/vue开发音乐APP学习总结(三)/index.html","hash":"c89c9eaa3e99a66416f0e019cb4eb79d7d802b31","modified":1530788633688},{"_id":"public/2018/06/27/Javascript中的this关键字(一)/index.html","hash":"e8b3bc6665404e609ab51438d77f66e7ff9c562b","modified":1530788633688},{"_id":"public/2018/06/26/vue开发音乐APP学习总结(二)/index.html","hash":"4f8a88d697eb2591a1239da2622ece57ea850d80","modified":1530788633688},{"_id":"public/2018/06/25/vue开发音乐APP学习总结(一)/index.html","hash":"10f90118e8dc401b9d749dfd17ce8f364d1ced2b","modified":1530788633688},{"_id":"public/2018/06/06/IE下URL中文参数乱码问题/index.html","hash":"221312f9cc42e0baf8353fa54e27101ac005e6de","modified":1530788633688},{"_id":"public/index.html","hash":"b202df7c2ef8937636f05a74a18e4d4dde1b2557","modified":1530788633688},{"_id":"public/images/observer_img1.png","hash":"e9f8fa0392e1548d3f6174a26bf9db06f27ea525","modified":1530788633695},{"_id":"public/images/observer_img2.png","hash":"a8de7d104af921bc167b19cee7cd0d165d72769a","modified":1530788633695},{"_id":"public/images/reactivity.png","hash":"7071337f9071f93ebf85639ede38b0f40fd75d98","modified":1530788633695},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1530788633695},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1530788633695},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1530788633695},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1530788633695},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1530788633695},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1530788633695},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1530788633695},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1530788633695},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1530788633695},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1530788633695},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1530788633695},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1530788633695},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1530788633695},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1530788633696},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1530788633696},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1530788633696},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1530788633696},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1530788633696},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1530788633696},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1530788633696},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1530788633696},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1530788633696},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1530788633696},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1530788633696},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1530788633696},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1530788633696},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1530788633696},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1530788633696},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1530788633696},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1530788633697},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1530788633697},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1530788633697},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1530788633697},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1530788634209},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1530788634216},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1530788634227},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1530788634227},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1530788634227},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1530788634227},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1530788634227},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1530788634227},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1530788634227},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1530788634227},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1530788634227},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1530788634227},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1530788634228},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1530788634228},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1530788634228},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1530788634228},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1530788634228},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1530788634228},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1530788634228},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1530788634228},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1530788634228},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1530788634228},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1530788634228},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1530788634228},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1530788634228},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1530788634228},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1530788634228},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1530788634228},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1530788634228},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1530788634228},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1530788634229},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1530788634229},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1530788634229},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1530788634229},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1530788634229},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1530788634229},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1530788634229},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1530788634229},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1530788634229},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1530788634229},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1530788634229},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1530788634229},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1530788634229},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1530788634229},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1530788634229},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1530788634229},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1530788634229},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1530788634230},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1530788634230},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1530788634230},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1530788634230},{"_id":"public/css/main.css","hash":"fa1d80af59b9db5cc980abc1311e69c3c236e961","modified":1530788634230},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1530788634230},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1530788634230},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1530788634230},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1530788634230},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1530788634230},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1530788634230},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1530788634230},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1530788634230},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1530788634230},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1530788634231},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1530788634231},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1530788634231},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1530788634231},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1530788634231},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1530788634231},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1530788634231},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1530788634231},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1530788634231},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1530788634231},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1530788634231},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1530788634232},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1530788634232},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1530788634232},{"_id":"public/uploads/avatar.png","hash":"924935cc0dc457f385601c0d47c4ac4a8bce26c6","modified":1530788634248},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1530788634248},{"_id":"public/images/keep_alive.gif","hash":"b5167d3756569c2ec726cd4a0f75741e8ef84d71","modified":1530788634293},{"_id":"public/images/keep_alive3.gif","hash":"16d7d49fcdb6fd0d02f00a4b334432e99da7b7ba","modified":1530788634299},{"_id":"public/images/keep_alive2.gif","hash":"4048f413e1f493fc9098082fb7f0ce794d960a12","modified":1530788634302}],"Category":[{"name":"Front-End","_id":"cjj8g104n0004kouoon511mue"}],"Data":[],"Page":[{"title":"categories","date":"2018-06-25T11:01:28.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-06-25 19:01:28\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-06-25T11:02:39.600Z","path":"categories/index.html","layout":"page","_id":"cjj8g104g0001kouoaiwy7ksf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-06-25T11:03:10.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-06-25 19:03:10\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-06-25T11:03:24.402Z","path":"tags/index.html","layout":"page","_id":"cjj8g104k0003kouorymoivzc","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"vue开发音乐APP学习总结(三)","date":"2018-07-04T07:41:23.000Z","_content":"在学习的过程中，学到了关于开发上的一些经验，在这里分享一下：\n1. 项目结构很重要。关于项目结构，每个人的开发习惯不同，公司的项目情况不同，好的项目结构起着至关重要的作用，它能够帮助你快速地梳理并理解项目具体的业务。那么在vue-music中，是这样划分项目目录的：\n  - api，所有的接口信息\n  - base，所有的基础组件\n  - common，基础样式，基础js，字体资源，图片\n  - components，所有的业务组件\n  - router，路由配置文件\n  - store，vuex相关文件\n2. 只做单纯的事。项目中重复使用的组件代码，我们一般会封装成公共组件。那么在封装公共组件时候要注意，避免对接收的数据进行处理，只需做一些消息的通知即可，具体业务的处理由父组件去处理。\n比如一个歌曲列表页，歌曲被点击了，只要告诉父组件这个歌曲被点击了，并将该歌曲传给父组件就好，至于父组件再做什么处理，那就跟子组件没关系了。\n3. 保证每一个公共组件是独立维护的。也就是说，公共组件需要的图片、样式，都放在一处管理。\n在vue-music项目中，基础的公共组件都放在了`base/` 目录下，每个组件都是一个文件夹，里面包含了vue文件和图片文件，每个组件的样式都写在了 `<style scoped></style>`中。\n4. 准确命名。不管是组件名还是函数名，准确命名是非常重要的，它能够清晰的表达该组件/函数表达的意思。","source":"_posts/vue开发音乐APP学习总结(三).md","raw":"---\ntitle: vue开发音乐APP学习总结(三)\ndate: 2018-07-04 15:41:23\ncategories:\n- Front-End\ntags:\n- Vue.js\n---\n在学习的过程中，学到了关于开发上的一些经验，在这里分享一下：\n1. 项目结构很重要。关于项目结构，每个人的开发习惯不同，公司的项目情况不同，好的项目结构起着至关重要的作用，它能够帮助你快速地梳理并理解项目具体的业务。那么在vue-music中，是这样划分项目目录的：\n  - api，所有的接口信息\n  - base，所有的基础组件\n  - common，基础样式，基础js，字体资源，图片\n  - components，所有的业务组件\n  - router，路由配置文件\n  - store，vuex相关文件\n2. 只做单纯的事。项目中重复使用的组件代码，我们一般会封装成公共组件。那么在封装公共组件时候要注意，避免对接收的数据进行处理，只需做一些消息的通知即可，具体业务的处理由父组件去处理。\n比如一个歌曲列表页，歌曲被点击了，只要告诉父组件这个歌曲被点击了，并将该歌曲传给父组件就好，至于父组件再做什么处理，那就跟子组件没关系了。\n3. 保证每一个公共组件是独立维护的。也就是说，公共组件需要的图片、样式，都放在一处管理。\n在vue-music项目中，基础的公共组件都放在了`base/` 目录下，每个组件都是一个文件夹，里面包含了vue文件和图片文件，每个组件的样式都写在了 `<style scoped></style>`中。\n4. 准确命名。不管是组件名还是函数名，准确命名是非常重要的，它能够清晰的表达该组件/函数表达的意思。","slug":"vue开发音乐APP学习总结(三)","published":1,"updated":"2018-07-04T10:35:46.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj8g104c0000kouo0qn3hzd2","content":"<p>在学习的过程中，学到了关于开发上的一些经验，在这里分享一下：</p>\n<ol>\n<li>项目结构很重要。关于项目结构，每个人的开发习惯不同，公司的项目情况不同，好的项目结构起着至关重要的作用，它能够帮助你快速地梳理并理解项目具体的业务。那么在vue-music中，是这样划分项目目录的：<ul>\n<li>api，所有的接口信息</li>\n<li>base，所有的基础组件</li>\n<li>common，基础样式，基础js，字体资源，图片</li>\n<li>components，所有的业务组件</li>\n<li>router，路由配置文件</li>\n<li>store，vuex相关文件</li>\n</ul>\n</li>\n<li>只做单纯的事。项目中重复使用的组件代码，我们一般会封装成公共组件。那么在封装公共组件时候要注意，避免对接收的数据进行处理，只需做一些消息的通知即可，具体业务的处理由父组件去处理。<br>比如一个歌曲列表页，歌曲被点击了，只要告诉父组件这个歌曲被点击了，并将该歌曲传给父组件就好，至于父组件再做什么处理，那就跟子组件没关系了。</li>\n<li>保证每一个公共组件是独立维护的。也就是说，公共组件需要的图片、样式，都放在一处管理。<br>在vue-music项目中，基础的公共组件都放在了<code>base/</code> 目录下，每个组件都是一个文件夹，里面包含了vue文件和图片文件，每个组件的样式都写在了 <code>&lt;style scoped&gt;&lt;/style&gt;</code>中。</li>\n<li>准确命名。不管是组件名还是函数名，准确命名是非常重要的，它能够清晰的表达该组件/函数表达的意思。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在学习的过程中，学到了关于开发上的一些经验，在这里分享一下：</p>\n<ol>\n<li>项目结构很重要。关于项目结构，每个人的开发习惯不同，公司的项目情况不同，好的项目结构起着至关重要的作用，它能够帮助你快速地梳理并理解项目具体的业务。那么在vue-music中，是这样划分项目目录的：<ul>\n<li>api，所有的接口信息</li>\n<li>base，所有的基础组件</li>\n<li>common，基础样式，基础js，字体资源，图片</li>\n<li>components，所有的业务组件</li>\n<li>router，路由配置文件</li>\n<li>store，vuex相关文件</li>\n</ul>\n</li>\n<li>只做单纯的事。项目中重复使用的组件代码，我们一般会封装成公共组件。那么在封装公共组件时候要注意，避免对接收的数据进行处理，只需做一些消息的通知即可，具体业务的处理由父组件去处理。<br>比如一个歌曲列表页，歌曲被点击了，只要告诉父组件这个歌曲被点击了，并将该歌曲传给父组件就好，至于父组件再做什么处理，那就跟子组件没关系了。</li>\n<li>保证每一个公共组件是独立维护的。也就是说，公共组件需要的图片、样式，都放在一处管理。<br>在vue-music项目中，基础的公共组件都放在了<code>base/</code> 目录下，每个组件都是一个文件夹，里面包含了vue文件和图片文件，每个组件的样式都写在了 <code>&lt;style scoped&gt;&lt;/style&gt;</code>中。</li>\n<li>准确命名。不管是组件名还是函数名，准确命名是非常重要的，它能够清晰的表达该组件/函数表达的意思。</li>\n</ol>\n"},{"title":"vue开发音乐APP学习总结(一)","date":"2018-06-25T02:41:34.000Z","_content":"\n最近在慕课上学习了vue.js开发音乐app的课程，学习到里很多东西，在这里进行总结一下。感兴趣的同学可以去看一下该课程，贴上[课程地址](https://coding.imooc.com/class/107.html)\n\n总结分为两方面，一个是在开发项目时不知道的一些技巧，一个是开发的思想。\n\n# 一、vue的一些使用技巧\n\n在学习的过程中get到了以前不知道的使用技巧，也看出了自己对vue的了解甚是浅薄。\n\n## 1. 在父组件中可以调用子组件的方法\n\n为子组件添加 `ref` 引用，可以通过this.$refs.chilren.fn()调用该组件的方法来实现业务需求或者开发基础组件。\n\n### 引申：Vue中的 ref\n> `ref` 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例。-- Vue.js API [#ref](https://cn.vuejs.org/v2/api/#ref)\n\n**1) 指向DOM元素**\n可以使用DOM提供的原生方法，设置样式、获取宽高等等。\n```Html\n<template>\n  <div>\n    <div ref=\"box1\"></div>\n    <div ref=\"box2\"></div>\n  </div>\n</template>\n\n// 获取实际宽度：this.$refs.box1.clientWidth\n// 添加样式：this.$refs.box2.style.bottom = '10px'\n```\n\n**2) 指向组件实例**\n可以调用该组件实例中methods里的方法，用来开发基础组件或者实现一些业务需求。\n比如开发一个最基础的弹窗组件，来控制显示隐藏。\n```Html\n<template>\n  <div class=\"dialog\" v-show=\"showFlag\">\n    这是一个弹窗组件\n  </div>\n<template>\n<script>\n  export default {\n    data() {\n      return {\n        showFlag: false\n      }\n    },\n    methods: {\n      show() {\n        this.showFlag = true;\n      },\n      hide() {\n        this.showFlag = false;\n      }\n    }\n  }\n</script>\n```\n在父组件中调用：\n```Html\n<template>\n  <div>\n    <dialog ref=\"dialog\" />\n  </div>\n</template>\n<script>\n  import Dialog from './dialog';\n\n  export default {\n    components: {\n      Dialog\n    }\n  }\n</script>\n\n// 使用 this.$refs.dialog.show()，可以让弹窗显示\n```\n\n## 2.若使用的属性（变量）不需要Vue追踪依赖对其响应渲染，则不需要在data中添加此属性。\n在开发过程中，有许多属性是不需要放在DOM中渲染展示的，只是在Vue实例中使用。\n\n举个例子：\n我只想在各个方法中使用这个属性（变量）。\n```Javascript\nexport default {\n  methods: {\n    moveTouchStart(e) {\n      this.touch.initiated = true;\n      const touch = e.touches[0];\n      this.touch.startX = touch.pageX;\n      this.touch.startY = touch.pageY;\n    },\n    middleTouchMove(e) {\n      if (!this.touch.initiated) {\n        return;\n      }\n      const touch = e.touches[0];\n      const deltaX = touch.pageX - this.touch.startX;\n      const deltaY = touch.pageY - this.touch.startY;\n      ....\n    }\n  }\n}\n```\n看到上面的代码应该就很清楚了，this.touch是在方法中随时调用和改写的属性，只需要在this（Vue实例）来添加这个属性，这个属性就会存在于此实例中，可以随时调用或者更改其值。\n\n#### 引申：Vue对data中的属性做了什么？\n> 当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。\n\n**如何实现响应的？**\n当把一个普通的JavaScript对象传给Vue实例的 data 选项，Vue会遍历此对象所有的属性，并使用 [Object.defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) 把这些属性全部转为getter/setter。\n\n示例：\n```Javascript\nlet obj = {};\n\nObject.defineProperty(obj, 'name', {\n  enumerable: true,\n  configurable: true,\n  get: function() {\n    console.log('get方法被调用了')\n  },\n  set: function(newVal) {\n    console.log(`set方法被调用了，值为：${newVal}`)\n  }\n})\n\nobj.name  // => get方法被调用了\nobj.name = 'Dave'  // => set方法被调用了，值为：Dave\n```\nget/set 方法内部的this都指向obj，意味着 get/set 函数可以操作对象内部的值。\n\n这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue追踪依赖，在属性被访问和修改时通知变化。\n\n> 每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知 watcher 重新计算，从而致使它关联的组件得以更新。-- Vue.js API [深入响应式原理](https://cn.vuejs.org/v2/guide/reactivity.html)\n\n![](/images/reactivity.png)\n图片来源：[https://cn.vuejs.org/v2/guide/reactivity.html](https://cn.vuejs.org/v2/guide/reactivity.html)","source":"_posts/vue开发音乐APP学习总结(一).md","raw":"---\ntitle: vue开发音乐APP学习总结(一)\ndate: 2018-06-25 10:41:34\ncategories:\n- Front-End\ntags:\n- Vue.js\n---\n\n最近在慕课上学习了vue.js开发音乐app的课程，学习到里很多东西，在这里进行总结一下。感兴趣的同学可以去看一下该课程，贴上[课程地址](https://coding.imooc.com/class/107.html)\n\n总结分为两方面，一个是在开发项目时不知道的一些技巧，一个是开发的思想。\n\n# 一、vue的一些使用技巧\n\n在学习的过程中get到了以前不知道的使用技巧，也看出了自己对vue的了解甚是浅薄。\n\n## 1. 在父组件中可以调用子组件的方法\n\n为子组件添加 `ref` 引用，可以通过this.$refs.chilren.fn()调用该组件的方法来实现业务需求或者开发基础组件。\n\n### 引申：Vue中的 ref\n> `ref` 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例。-- Vue.js API [#ref](https://cn.vuejs.org/v2/api/#ref)\n\n**1) 指向DOM元素**\n可以使用DOM提供的原生方法，设置样式、获取宽高等等。\n```Html\n<template>\n  <div>\n    <div ref=\"box1\"></div>\n    <div ref=\"box2\"></div>\n  </div>\n</template>\n\n// 获取实际宽度：this.$refs.box1.clientWidth\n// 添加样式：this.$refs.box2.style.bottom = '10px'\n```\n\n**2) 指向组件实例**\n可以调用该组件实例中methods里的方法，用来开发基础组件或者实现一些业务需求。\n比如开发一个最基础的弹窗组件，来控制显示隐藏。\n```Html\n<template>\n  <div class=\"dialog\" v-show=\"showFlag\">\n    这是一个弹窗组件\n  </div>\n<template>\n<script>\n  export default {\n    data() {\n      return {\n        showFlag: false\n      }\n    },\n    methods: {\n      show() {\n        this.showFlag = true;\n      },\n      hide() {\n        this.showFlag = false;\n      }\n    }\n  }\n</script>\n```\n在父组件中调用：\n```Html\n<template>\n  <div>\n    <dialog ref=\"dialog\" />\n  </div>\n</template>\n<script>\n  import Dialog from './dialog';\n\n  export default {\n    components: {\n      Dialog\n    }\n  }\n</script>\n\n// 使用 this.$refs.dialog.show()，可以让弹窗显示\n```\n\n## 2.若使用的属性（变量）不需要Vue追踪依赖对其响应渲染，则不需要在data中添加此属性。\n在开发过程中，有许多属性是不需要放在DOM中渲染展示的，只是在Vue实例中使用。\n\n举个例子：\n我只想在各个方法中使用这个属性（变量）。\n```Javascript\nexport default {\n  methods: {\n    moveTouchStart(e) {\n      this.touch.initiated = true;\n      const touch = e.touches[0];\n      this.touch.startX = touch.pageX;\n      this.touch.startY = touch.pageY;\n    },\n    middleTouchMove(e) {\n      if (!this.touch.initiated) {\n        return;\n      }\n      const touch = e.touches[0];\n      const deltaX = touch.pageX - this.touch.startX;\n      const deltaY = touch.pageY - this.touch.startY;\n      ....\n    }\n  }\n}\n```\n看到上面的代码应该就很清楚了，this.touch是在方法中随时调用和改写的属性，只需要在this（Vue实例）来添加这个属性，这个属性就会存在于此实例中，可以随时调用或者更改其值。\n\n#### 引申：Vue对data中的属性做了什么？\n> 当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。\n\n**如何实现响应的？**\n当把一个普通的JavaScript对象传给Vue实例的 data 选项，Vue会遍历此对象所有的属性，并使用 [Object.defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) 把这些属性全部转为getter/setter。\n\n示例：\n```Javascript\nlet obj = {};\n\nObject.defineProperty(obj, 'name', {\n  enumerable: true,\n  configurable: true,\n  get: function() {\n    console.log('get方法被调用了')\n  },\n  set: function(newVal) {\n    console.log(`set方法被调用了，值为：${newVal}`)\n  }\n})\n\nobj.name  // => get方法被调用了\nobj.name = 'Dave'  // => set方法被调用了，值为：Dave\n```\nget/set 方法内部的this都指向obj，意味着 get/set 函数可以操作对象内部的值。\n\n这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue追踪依赖，在属性被访问和修改时通知变化。\n\n> 每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知 watcher 重新计算，从而致使它关联的组件得以更新。-- Vue.js API [深入响应式原理](https://cn.vuejs.org/v2/guide/reactivity.html)\n\n![](/images/reactivity.png)\n图片来源：[https://cn.vuejs.org/v2/guide/reactivity.html](https://cn.vuejs.org/v2/guide/reactivity.html)","slug":"vue开发音乐APP学习总结(一)","published":1,"updated":"2018-06-27T03:39:55.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj8g104i0002kouoc79lzxre","content":"<p>最近在慕课上学习了vue.js开发音乐app的课程，学习到里很多东西，在这里进行总结一下。感兴趣的同学可以去看一下该课程，贴上<a href=\"https://coding.imooc.com/class/107.html\" target=\"_blank\" rel=\"noopener\">课程地址</a></p>\n<p>总结分为两方面，一个是在开发项目时不知道的一些技巧，一个是开发的思想。</p>\n<h1 id=\"一、vue的一些使用技巧\"><a href=\"#一、vue的一些使用技巧\" class=\"headerlink\" title=\"一、vue的一些使用技巧\"></a>一、vue的一些使用技巧</h1><p>在学习的过程中get到了以前不知道的使用技巧，也看出了自己对vue的了解甚是浅薄。</p>\n<h2 id=\"1-在父组件中可以调用子组件的方法\"><a href=\"#1-在父组件中可以调用子组件的方法\" class=\"headerlink\" title=\"1. 在父组件中可以调用子组件的方法\"></a>1. 在父组件中可以调用子组件的方法</h2><p>为子组件添加 <code>ref</code> 引用，可以通过this.$refs.chilren.fn()调用该组件的方法来实现业务需求或者开发基础组件。</p>\n<h3 id=\"引申：Vue中的-ref\"><a href=\"#引申：Vue中的-ref\" class=\"headerlink\" title=\"引申：Vue中的 ref\"></a>引申：Vue中的 ref</h3><blockquote>\n<p><code>ref</code> 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例。– Vue.js API <a href=\"https://cn.vuejs.org/v2/api/#ref\" target=\"_blank\" rel=\"noopener\">#ref</a></p>\n</blockquote>\n<p><strong>1) 指向DOM元素</strong><br>可以使用DOM提供的原生方法，设置样式、获取宽高等等。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"box1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"box2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 获取实际宽度：this.$refs.box1.clientWidth</span><br><span class=\"line\">// 添加样式：this.$refs.box2.style.bottom = '10px'</span><br></pre></td></tr></table></figure></p>\n<p><strong>2) 指向组件实例</strong><br>可以调用该组件实例中methods里的方法，用来开发基础组件或者实现一些业务需求。<br>比如开发一个最基础的弹窗组件，来控制显示隐藏。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dialog\"</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"showFlag\"</span>&gt;</span></span><br><span class=\"line\">    这是一个弹窗组件</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  export default &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      return &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        showFlag: false</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      show() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        this.showFlag = true;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      hide() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        this.showFlag = false;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在父组件中调用：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dialog</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dialog\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  import Dialog from './dialog';</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  export default &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      Dialog</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 使用 this.$refs.dialog.show()，可以让弹窗显示</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-若使用的属性（变量）不需要Vue追踪依赖对其响应渲染，则不需要在data中添加此属性。\"><a href=\"#2-若使用的属性（变量）不需要Vue追踪依赖对其响应渲染，则不需要在data中添加此属性。\" class=\"headerlink\" title=\"2.若使用的属性（变量）不需要Vue追踪依赖对其响应渲染，则不需要在data中添加此属性。\"></a>2.若使用的属性（变量）不需要Vue追踪依赖对其响应渲染，则不需要在data中添加此属性。</h2><p>在开发过程中，有许多属性是不需要放在DOM中渲染展示的，只是在Vue实例中使用。</p>\n<p>举个例子：<br>我只想在各个方法中使用这个属性（变量）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    moveTouchStart(e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.touch.initiated = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> touch = e.touches[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.touch.startX = touch.pageX;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.touch.startY = touch.pageY;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    middleTouchMove(e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.touch.initiated) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> touch = e.touches[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> deltaX = touch.pageX - <span class=\"keyword\">this</span>.touch.startX;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> deltaY = touch.pageY - <span class=\"keyword\">this</span>.touch.startY;</span><br><span class=\"line\">      ....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看到上面的代码应该就很清楚了，this.touch是在方法中随时调用和改写的属性，只需要在this（Vue实例）来添加这个属性，这个属性就会存在于此实例中，可以随时调用或者更改其值。</p>\n<h4 id=\"引申：Vue对data中的属性做了什么？\"><a href=\"#引申：Vue对data中的属性做了什么？\" class=\"headerlink\" title=\"引申：Vue对data中的属性做了什么？\"></a>引申：Vue对data中的属性做了什么？</h4><blockquote>\n<p>当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。</p>\n</blockquote>\n<p><strong>如何实现响应的？</strong><br>当把一个普通的JavaScript对象传给Vue实例的 data 选项，Vue会遍历此对象所有的属性，并使用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener\">Object.defineProperty</a> 把这些属性全部转为getter/setter。</p>\n<p>示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'get方法被调用了'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`set方法被调用了，值为：<span class=\"subst\">$&#123;newVal&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.name  <span class=\"comment\">// =&gt; get方法被调用了</span></span><br><span class=\"line\">obj.name = <span class=\"string\">'Dave'</span>  <span class=\"comment\">// =&gt; set方法被调用了，值为：Dave</span></span><br></pre></td></tr></table></figure></p>\n<p>get/set 方法内部的this都指向obj，意味着 get/set 函数可以操作对象内部的值。</p>\n<p>这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue追踪依赖，在属性被访问和修改时通知变化。</p>\n<blockquote>\n<p>每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知 watcher 重新计算，从而致使它关联的组件得以更新。– Vue.js API <a href=\"https://cn.vuejs.org/v2/guide/reactivity.html\" target=\"_blank\" rel=\"noopener\">深入响应式原理</a></p>\n</blockquote>\n<p><img src=\"/images/reactivity.png\" alt=\"\"><br>图片来源：<a href=\"https://cn.vuejs.org/v2/guide/reactivity.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/reactivity.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在慕课上学习了vue.js开发音乐app的课程，学习到里很多东西，在这里进行总结一下。感兴趣的同学可以去看一下该课程，贴上<a href=\"https://coding.imooc.com/class/107.html\" target=\"_blank\" rel=\"noopener\">课程地址</a></p>\n<p>总结分为两方面，一个是在开发项目时不知道的一些技巧，一个是开发的思想。</p>\n<h1 id=\"一、vue的一些使用技巧\"><a href=\"#一、vue的一些使用技巧\" class=\"headerlink\" title=\"一、vue的一些使用技巧\"></a>一、vue的一些使用技巧</h1><p>在学习的过程中get到了以前不知道的使用技巧，也看出了自己对vue的了解甚是浅薄。</p>\n<h2 id=\"1-在父组件中可以调用子组件的方法\"><a href=\"#1-在父组件中可以调用子组件的方法\" class=\"headerlink\" title=\"1. 在父组件中可以调用子组件的方法\"></a>1. 在父组件中可以调用子组件的方法</h2><p>为子组件添加 <code>ref</code> 引用，可以通过this.$refs.chilren.fn()调用该组件的方法来实现业务需求或者开发基础组件。</p>\n<h3 id=\"引申：Vue中的-ref\"><a href=\"#引申：Vue中的-ref\" class=\"headerlink\" title=\"引申：Vue中的 ref\"></a>引申：Vue中的 ref</h3><blockquote>\n<p><code>ref</code> 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例。– Vue.js API <a href=\"https://cn.vuejs.org/v2/api/#ref\" target=\"_blank\" rel=\"noopener\">#ref</a></p>\n</blockquote>\n<p><strong>1) 指向DOM元素</strong><br>可以使用DOM提供的原生方法，设置样式、获取宽高等等。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"box1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"box2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 获取实际宽度：this.$refs.box1.clientWidth</span><br><span class=\"line\">// 添加样式：this.$refs.box2.style.bottom = '10px'</span><br></pre></td></tr></table></figure></p>\n<p><strong>2) 指向组件实例</strong><br>可以调用该组件实例中methods里的方法，用来开发基础组件或者实现一些业务需求。<br>比如开发一个最基础的弹窗组件，来控制显示隐藏。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dialog\"</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"showFlag\"</span>&gt;</span></span><br><span class=\"line\">    这是一个弹窗组件</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  export default &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      return &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        showFlag: false</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      show() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        this.showFlag = true;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      hide() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        this.showFlag = false;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在父组件中调用：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dialog</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dialog\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  import Dialog from './dialog';</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  export default &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      Dialog</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 使用 this.$refs.dialog.show()，可以让弹窗显示</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-若使用的属性（变量）不需要Vue追踪依赖对其响应渲染，则不需要在data中添加此属性。\"><a href=\"#2-若使用的属性（变量）不需要Vue追踪依赖对其响应渲染，则不需要在data中添加此属性。\" class=\"headerlink\" title=\"2.若使用的属性（变量）不需要Vue追踪依赖对其响应渲染，则不需要在data中添加此属性。\"></a>2.若使用的属性（变量）不需要Vue追踪依赖对其响应渲染，则不需要在data中添加此属性。</h2><p>在开发过程中，有许多属性是不需要放在DOM中渲染展示的，只是在Vue实例中使用。</p>\n<p>举个例子：<br>我只想在各个方法中使用这个属性（变量）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    moveTouchStart(e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.touch.initiated = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> touch = e.touches[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.touch.startX = touch.pageX;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.touch.startY = touch.pageY;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    middleTouchMove(e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.touch.initiated) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> touch = e.touches[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> deltaX = touch.pageX - <span class=\"keyword\">this</span>.touch.startX;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> deltaY = touch.pageY - <span class=\"keyword\">this</span>.touch.startY;</span><br><span class=\"line\">      ....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看到上面的代码应该就很清楚了，this.touch是在方法中随时调用和改写的属性，只需要在this（Vue实例）来添加这个属性，这个属性就会存在于此实例中，可以随时调用或者更改其值。</p>\n<h4 id=\"引申：Vue对data中的属性做了什么？\"><a href=\"#引申：Vue对data中的属性做了什么？\" class=\"headerlink\" title=\"引申：Vue对data中的属性做了什么？\"></a>引申：Vue对data中的属性做了什么？</h4><blockquote>\n<p>当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。</p>\n</blockquote>\n<p><strong>如何实现响应的？</strong><br>当把一个普通的JavaScript对象传给Vue实例的 data 选项，Vue会遍历此对象所有的属性，并使用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener\">Object.defineProperty</a> 把这些属性全部转为getter/setter。</p>\n<p>示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'get方法被调用了'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`set方法被调用了，值为：<span class=\"subst\">$&#123;newVal&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.name  <span class=\"comment\">// =&gt; get方法被调用了</span></span><br><span class=\"line\">obj.name = <span class=\"string\">'Dave'</span>  <span class=\"comment\">// =&gt; set方法被调用了，值为：Dave</span></span><br></pre></td></tr></table></figure></p>\n<p>get/set 方法内部的this都指向obj，意味着 get/set 函数可以操作对象内部的值。</p>\n<p>这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue追踪依赖，在属性被访问和修改时通知变化。</p>\n<blockquote>\n<p>每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知 watcher 重新计算，从而致使它关联的组件得以更新。– Vue.js API <a href=\"https://cn.vuejs.org/v2/guide/reactivity.html\" target=\"_blank\" rel=\"noopener\">深入响应式原理</a></p>\n</blockquote>\n<p><img src=\"/images/reactivity.png\" alt=\"\"><br>图片来源：<a href=\"https://cn.vuejs.org/v2/guide/reactivity.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/reactivity.html</a></p>\n"},{"title":"IE下URL中文参数乱码问题","date":"2018-06-06T11:24:21.000Z","_content":"\n### 问题排查\n公司的B端项目在做IE兼容性处理，发现高德地图在IE无法显示。\n经排查，是因为接口URL携带的中文参数在IE中显示为乱码，服务端返回了错误信息。\n\n### 解决办法\n使用[encodeURI()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI)方法进行处理，将中文参数进行编码即可。\n```Javascript\nconst url = 'http://www.xxxx.com';\nconst params = `?key=xxxx&${encodeURI(city)}`\n\nthis.http.get(url + params);\n```","source":"_posts/IE下URL中文参数乱码问题.md","raw":"---\ntitle: IE下URL中文参数乱码问题\ndate: 2018-06-06 19:24:21\ncategories:\n- Front-End\ntags:\n- Javascript\n- encodeURI\n---\n\n### 问题排查\n公司的B端项目在做IE兼容性处理，发现高德地图在IE无法显示。\n经排查，是因为接口URL携带的中文参数在IE中显示为乱码，服务端返回了错误信息。\n\n### 解决办法\n使用[encodeURI()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI)方法进行处理，将中文参数进行编码即可。\n```Javascript\nconst url = 'http://www.xxxx.com';\nconst params = `?key=xxxx&${encodeURI(city)}`\n\nthis.http.get(url + params);\n```","slug":"IE下URL中文参数乱码问题","published":1,"updated":"2018-07-05T03:32:42.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj8g104p0006kouo0rpoi2d2","content":"<h3 id=\"问题排查\"><a href=\"#问题排查\" class=\"headerlink\" title=\"问题排查\"></a>问题排查</h3><p>公司的B端项目在做IE兼容性处理，发现高德地图在IE无法显示。<br>经排查，是因为接口URL携带的中文参数在IE中显示为乱码，服务端返回了错误信息。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\" target=\"_blank\" rel=\"noopener\">encodeURI()</a>方法进行处理，将中文参数进行编码即可。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">'http://www.xxxx.com'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> params = <span class=\"string\">`?key=xxxx&amp;<span class=\"subst\">$&#123;<span class=\"built_in\">encodeURI</span>(city)&#125;</span>`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.http.get(url + params);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题排查\"><a href=\"#问题排查\" class=\"headerlink\" title=\"问题排查\"></a>问题排查</h3><p>公司的B端项目在做IE兼容性处理，发现高德地图在IE无法显示。<br>经排查，是因为接口URL携带的中文参数在IE中显示为乱码，服务端返回了错误信息。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\" target=\"_blank\" rel=\"noopener\">encodeURI()</a>方法进行处理，将中文参数进行编码即可。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">'http://www.xxxx.com'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> params = <span class=\"string\">`?key=xxxx&amp;<span class=\"subst\">$&#123;<span class=\"built_in\">encodeURI</span>(city)&#125;</span>`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.http.get(url + params);</span><br></pre></td></tr></table></figure></p>\n"},{"title":"观察者模式","date":"2018-07-05T03:30:13.000Z","_content":"前两天一个学弟问了我一个问题，使用面向对象的方式实现下面的功能：\n<img src=\"/images/observer_img1.png\" style=\"display: inline-block !important\">\nemmmm....，说实话，这问题对我来说有点超纲，自己没怎么使用面向对象的方式写过功能。嘛，正好练习一下吧！\n仔细分析过后，需要两个类实现人数计算和总人数计算的功能：\n```Javascript\n// 计算数量\nclass CalculateNum {\n  constructor({el, name}) {\n    this.el = document.getElementById(el);  // 要绑定的DOM元素\n    this.name = name;  // 要计算的对象名称，例：成人，儿童\n\n    this.input = this.el.children[1];  // 获取输入框\n    this.reduceBtn = this.el.children[2];  // 减法按钮\n    this.addBtn = this.el.children[3];  // 加法按钮\n    this.num = 0;  // 数量\n\n    this.init();\n  }\n\n  init() {\n    this.bindAddEvent();\n    this.bindReduceEvent();\n  }\n\n  // 绑定加法事件\n  bindAddEvent() {\n    this.addBtn.addEventListener('click', () => {\n      this.num += 1;\n      this.input.value = this.num;\n    })\n  }\n\n  // 绑定减法事件\n  bindReduce() {\n    this.reduceBtn.addEventListener('click', () => {\n      this.num -= 1;\n      this.input.value = this.num;\n    })\n  }\n}\n\n// 计算总数\nclass CalculateTotalNum {\n  constructor({el}) {\n    this.el = document.getElementById(el);  // 获取input元素\n    this.data = {};\n  }\n\n  // 计算总数\n  getTotalNum({name, value}) {\n    this._data[name] = value;\n    let num = 0;\n    for (let k in this._data) {\n      n += this._data[k];\n    }\n    this.el.value = num;\n  }\n}\n\n// 成人\nconst adult = new CalculateNum({\n  el: 'J_adult',\n  name: 'adult'\n})\n\n// 儿童\nconst children = new CalculateNum({\n  el: 'J_children',\n  name: 'children'\n})\n\n// 总数\nconst total = new CalculateTotalNum({\n  el: 'J_total'\n})\n```\n接下来就要考虑 `adult` 和 `children` 如何将计算的值传递给 `total` ，告诉 `total` 我的值被改变了，你要重新计算总数。那么这里涉及到一个设计模式，观察者模式，具体的解释会写在后面。我们先来实现一下：\n```Javascript\nclass Event {\n  constructor() {\n    this.eventList = {};  // 事件的缓存列表\n  }\n\n  // 订阅事件\n  on(eventType, fn) {\n    const fns = this.eventList[eventType];\n    if (!fns) {\n      fns = [];\n      fns.push(fn);\n    }\n  }\n\n  // 发布事件\n  emit() {\n    const eventType = Array.prototype.shift.call(arguments);\n    const fns = this.eventList[eventType];\n\n    fns.map(fn => {\n      fn.apply(this, arguments);\n    })\n  }\n\n  // 取消订阅\n  remove(eventType, fn) {\n    const fns = this.eventList[eventType];\n    if (!fns) {\n      return false;\n    }\n    if (!fn) {\n      fns && (fns.length = 0);\n    } else {\n      for (const l = fns.length - 1; l >= 0; l--) {\n        const _fn = fns[l];\n        if (_fn === fn) {\n          fns.splice(l, 1);\n        }\n      }\n    }\n  }\n}\n```\n接下来呢，我们订阅一个 `getTotal` 事件，当 `adult` 和 `children` 的值发生变化时，发布事件就可以了：\n```Javascript\nconst event = new Event();\n\n// 订阅 getTotal 事件\nevent.on('getTotal', ({name, value}) => {\n  total.getTotal({name, value});  // 当消息发布后，执行此方法计算总数\n})\n\n// 在 CalculateNum 中添加发布 getTotal 事件\nclass CalculateNum {\n  ...\n\n  bindAddEvent() {\n    ...\n\n    this.addBtn.addEventlistener('click', () => {\n      ...\n      this.num += 1;\n      event.emit('getTotal', {name: this.name, value: this.num});\n    })\n  }\n\n  bindReduceEvent() {\n\n    this.reduceBtn.addEventlistener('click', () => {\n      ...\n      this.num -= 1;\n      event.emit('getTotal', {name: this.name, value: this.num})\n    }\n  }\n}\n```\n在以上代码中，创建了一个event实例，用来订阅-发布事件。订阅的 `getTotal` 事件，接收一个对象，包含两个属性 `name` 和 `value` ，`name` 是用来区分角色，`value` 是计算后的值。然后在 `bindAddEvent` 和 `bindReduceEvent` 方法中，为加减法的点击事件添加了发布事件 `getTotal` 的代码，将 `name` 和 `value` 传递进去。\n至此，该功能算是完成了。\n\n#### 什么是观察者模式？\n我在知乎中找到了一些解释：\n##### 第一种解释\n> This is a pattern of development in which your class or primary object (known as the Observable) notifies other interested classes or objects (known as Observers) with relevant information (events).\n\n类和主对象（可观察对象）用相关信息（事件）来通知其他感兴趣的类或对象（观察者）。\n##### 第二种解释\n在观察者模式中，观察者需要主动订阅目标事件；在目标发出内容改变的事件后，直接接受事件并作出响应。\n\n再来谈谈我的理解，举个例子：\n比如说我对知乎上某个大牛非常感兴趣，喜欢看他的文章，希望有新的文章发布时能够及时的知道，那我只需要关注（订阅）他一下就好了，当有新文章发布的时候，我就能收到通知了。\n\n<img src=\"/images/observer_img2.png\" style=\"display: inline-block !important\">\n\n#### 总结\n- 观察者模式中，被观察者是最主要的，可以接受多个订阅者，是一对多的关系。\n- 观察者模式是一种紧密耦合的设计模式，用起来简单直接，但是扩展性较差。","source":"_posts/观察者模式.md","raw":"---\ntitle: 观察者模式\ndate: 2018-07-05 11:30:13\ncategories:\n- Front-End\ntags:\n- Javascript\n---\n前两天一个学弟问了我一个问题，使用面向对象的方式实现下面的功能：\n<img src=\"/images/observer_img1.png\" style=\"display: inline-block !important\">\nemmmm....，说实话，这问题对我来说有点超纲，自己没怎么使用面向对象的方式写过功能。嘛，正好练习一下吧！\n仔细分析过后，需要两个类实现人数计算和总人数计算的功能：\n```Javascript\n// 计算数量\nclass CalculateNum {\n  constructor({el, name}) {\n    this.el = document.getElementById(el);  // 要绑定的DOM元素\n    this.name = name;  // 要计算的对象名称，例：成人，儿童\n\n    this.input = this.el.children[1];  // 获取输入框\n    this.reduceBtn = this.el.children[2];  // 减法按钮\n    this.addBtn = this.el.children[3];  // 加法按钮\n    this.num = 0;  // 数量\n\n    this.init();\n  }\n\n  init() {\n    this.bindAddEvent();\n    this.bindReduceEvent();\n  }\n\n  // 绑定加法事件\n  bindAddEvent() {\n    this.addBtn.addEventListener('click', () => {\n      this.num += 1;\n      this.input.value = this.num;\n    })\n  }\n\n  // 绑定减法事件\n  bindReduce() {\n    this.reduceBtn.addEventListener('click', () => {\n      this.num -= 1;\n      this.input.value = this.num;\n    })\n  }\n}\n\n// 计算总数\nclass CalculateTotalNum {\n  constructor({el}) {\n    this.el = document.getElementById(el);  // 获取input元素\n    this.data = {};\n  }\n\n  // 计算总数\n  getTotalNum({name, value}) {\n    this._data[name] = value;\n    let num = 0;\n    for (let k in this._data) {\n      n += this._data[k];\n    }\n    this.el.value = num;\n  }\n}\n\n// 成人\nconst adult = new CalculateNum({\n  el: 'J_adult',\n  name: 'adult'\n})\n\n// 儿童\nconst children = new CalculateNum({\n  el: 'J_children',\n  name: 'children'\n})\n\n// 总数\nconst total = new CalculateTotalNum({\n  el: 'J_total'\n})\n```\n接下来就要考虑 `adult` 和 `children` 如何将计算的值传递给 `total` ，告诉 `total` 我的值被改变了，你要重新计算总数。那么这里涉及到一个设计模式，观察者模式，具体的解释会写在后面。我们先来实现一下：\n```Javascript\nclass Event {\n  constructor() {\n    this.eventList = {};  // 事件的缓存列表\n  }\n\n  // 订阅事件\n  on(eventType, fn) {\n    const fns = this.eventList[eventType];\n    if (!fns) {\n      fns = [];\n      fns.push(fn);\n    }\n  }\n\n  // 发布事件\n  emit() {\n    const eventType = Array.prototype.shift.call(arguments);\n    const fns = this.eventList[eventType];\n\n    fns.map(fn => {\n      fn.apply(this, arguments);\n    })\n  }\n\n  // 取消订阅\n  remove(eventType, fn) {\n    const fns = this.eventList[eventType];\n    if (!fns) {\n      return false;\n    }\n    if (!fn) {\n      fns && (fns.length = 0);\n    } else {\n      for (const l = fns.length - 1; l >= 0; l--) {\n        const _fn = fns[l];\n        if (_fn === fn) {\n          fns.splice(l, 1);\n        }\n      }\n    }\n  }\n}\n```\n接下来呢，我们订阅一个 `getTotal` 事件，当 `adult` 和 `children` 的值发生变化时，发布事件就可以了：\n```Javascript\nconst event = new Event();\n\n// 订阅 getTotal 事件\nevent.on('getTotal', ({name, value}) => {\n  total.getTotal({name, value});  // 当消息发布后，执行此方法计算总数\n})\n\n// 在 CalculateNum 中添加发布 getTotal 事件\nclass CalculateNum {\n  ...\n\n  bindAddEvent() {\n    ...\n\n    this.addBtn.addEventlistener('click', () => {\n      ...\n      this.num += 1;\n      event.emit('getTotal', {name: this.name, value: this.num});\n    })\n  }\n\n  bindReduceEvent() {\n\n    this.reduceBtn.addEventlistener('click', () => {\n      ...\n      this.num -= 1;\n      event.emit('getTotal', {name: this.name, value: this.num})\n    }\n  }\n}\n```\n在以上代码中，创建了一个event实例，用来订阅-发布事件。订阅的 `getTotal` 事件，接收一个对象，包含两个属性 `name` 和 `value` ，`name` 是用来区分角色，`value` 是计算后的值。然后在 `bindAddEvent` 和 `bindReduceEvent` 方法中，为加减法的点击事件添加了发布事件 `getTotal` 的代码，将 `name` 和 `value` 传递进去。\n至此，该功能算是完成了。\n\n#### 什么是观察者模式？\n我在知乎中找到了一些解释：\n##### 第一种解释\n> This is a pattern of development in which your class or primary object (known as the Observable) notifies other interested classes or objects (known as Observers) with relevant information (events).\n\n类和主对象（可观察对象）用相关信息（事件）来通知其他感兴趣的类或对象（观察者）。\n##### 第二种解释\n在观察者模式中，观察者需要主动订阅目标事件；在目标发出内容改变的事件后，直接接受事件并作出响应。\n\n再来谈谈我的理解，举个例子：\n比如说我对知乎上某个大牛非常感兴趣，喜欢看他的文章，希望有新的文章发布时能够及时的知道，那我只需要关注（订阅）他一下就好了，当有新文章发布的时候，我就能收到通知了。\n\n<img src=\"/images/observer_img2.png\" style=\"display: inline-block !important\">\n\n#### 总结\n- 观察者模式中，被观察者是最主要的，可以接受多个订阅者，是一对多的关系。\n- 观察者模式是一种紧密耦合的设计模式，用起来简单直接，但是扩展性较差。","slug":"观察者模式","published":1,"updated":"2018-07-05T11:03:40.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj8g104q0007kouojdr31wn3","content":"<p>前两天一个学弟问了我一个问题，使用面向对象的方式实现下面的功能：<br><img src=\"/images/observer_img1.png\" style=\"display: inline-block !important\"><br>emmmm….，说实话，这问题对我来说有点超纲，自己没怎么使用面向对象的方式写过功能。嘛，正好练习一下吧！<br>仔细分析过后，需要两个类实现人数计算和总人数计算的功能：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 计算数量</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculateNum</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(&#123;el, name&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.el = <span class=\"built_in\">document</span>.getElementById(el);  <span class=\"comment\">// 要绑定的DOM元素</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;  <span class=\"comment\">// 要计算的对象名称，例：成人，儿童</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.input = <span class=\"keyword\">this</span>.el.children[<span class=\"number\">1</span>];  <span class=\"comment\">// 获取输入框</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reduceBtn = <span class=\"keyword\">this</span>.el.children[<span class=\"number\">2</span>];  <span class=\"comment\">// 减法按钮</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.addBtn = <span class=\"keyword\">this</span>.el.children[<span class=\"number\">3</span>];  <span class=\"comment\">// 加法按钮</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.num = <span class=\"number\">0</span>;  <span class=\"comment\">// 数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.init();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  init() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bindAddEvent();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bindReduceEvent();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 绑定加法事件</span></span><br><span class=\"line\">  bindAddEvent() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.addBtn.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.num += <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.input.value = <span class=\"keyword\">this</span>.num;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 绑定减法事件</span></span><br><span class=\"line\">  bindReduce() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reduceBtn.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.num -= <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.input.value = <span class=\"keyword\">this</span>.num;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算总数</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculateTotalNum</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(&#123;el&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.el = <span class=\"built_in\">document</span>.getElementById(el);  <span class=\"comment\">// 获取input元素</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 计算总数</span></span><br><span class=\"line\">  getTotalNum(&#123;name, value&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._data[name] = value;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>._data) &#123;</span><br><span class=\"line\">      n += <span class=\"keyword\">this</span>._data[k];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.el.value = num;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 成人</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> adult = <span class=\"keyword\">new</span> CalculateNum(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'J_adult'</span>,</span><br><span class=\"line\">  name: <span class=\"string\">'adult'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 儿童</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> children = <span class=\"keyword\">new</span> CalculateNum(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'J_children'</span>,</span><br><span class=\"line\">  name: <span class=\"string\">'children'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 总数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> total = <span class=\"keyword\">new</span> CalculateTotalNum(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'J_total'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>接下来就要考虑 <code>adult</code> 和 <code>children</code> 如何将计算的值传递给 <code>total</code> ，告诉 <code>total</code> 我的值被改变了，你要重新计算总数。那么这里涉及到一个设计模式，观察者模式，具体的解释会写在后面。我们先来实现一下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Event</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.eventList = &#123;&#125;;  <span class=\"comment\">// 事件的缓存列表</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 订阅事件</span></span><br><span class=\"line\">  on(eventType, fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fns = <span class=\"keyword\">this</span>.eventList[eventType];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fns) &#123;</span><br><span class=\"line\">      fns = [];</span><br><span class=\"line\">      fns.push(fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 发布事件</span></span><br><span class=\"line\">  emit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> eventType = <span class=\"built_in\">Array</span>.prototype.shift.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fns = <span class=\"keyword\">this</span>.eventList[eventType];</span><br><span class=\"line\"></span><br><span class=\"line\">    fns.map(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> &#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 取消订阅</span></span><br><span class=\"line\">  remove(eventType, fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fns = <span class=\"keyword\">this</span>.eventList[eventType];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fns) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fn) &#123;</span><br><span class=\"line\">      fns &amp;&amp; (fns.length = <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> l = fns.length - <span class=\"number\">1</span>; l &gt;= <span class=\"number\">0</span>; l--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> _fn = fns[l];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_fn === fn) &#123;</span><br><span class=\"line\">          fns.splice(l, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来呢，我们订阅一个 <code>getTotal</code> 事件，当 <code>adult</code> 和 <code>children</code> 的值发生变化时，发布事件就可以了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> event = <span class=\"keyword\">new</span> Event();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 订阅 getTotal 事件</span></span><br><span class=\"line\">event.on(<span class=\"string\">'getTotal'</span>, (&#123;name, value&#125;) =&gt; &#123;</span><br><span class=\"line\">  total.getTotal(&#123;name, value&#125;);  <span class=\"comment\">// 当消息发布后，执行此方法计算总数</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 CalculateNum 中添加发布 getTotal 事件</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculateNum</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  bindAddEvent() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.addBtn.addEventlistener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.num += <span class=\"number\">1</span>;</span><br><span class=\"line\">      event.emit(<span class=\"string\">'getTotal'</span>, &#123;<span class=\"attr\">name</span>: <span class=\"keyword\">this</span>.name, <span class=\"attr\">value</span>: <span class=\"keyword\">this</span>.num&#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  bindReduceEvent() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reduceBtn.addEventlistener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.num -= <span class=\"number\">1</span>;</span><br><span class=\"line\">      event.emit(<span class=\"string\">'getTotal'</span>, &#123;<span class=\"attr\">name</span>: <span class=\"keyword\">this</span>.name, <span class=\"attr\">value</span>: <span class=\"keyword\">this</span>.num&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在以上代码中，创建了一个event实例，用来订阅-发布事件。订阅的 <code>getTotal</code> 事件，接收一个对象，包含两个属性 <code>name</code> 和 <code>value</code> ，<code>name</code> 是用来区分角色，<code>value</code> 是计算后的值。然后在 <code>bindAddEvent</code> 和 <code>bindReduceEvent</code> 方法中，为加减法的点击事件添加了发布事件 <code>getTotal</code> 的代码，将 <code>name</code> 和 <code>value</code> 传递进去。<br>至此，该功能算是完成了。</p>\n<h4 id=\"什么是观察者模式？\"><a href=\"#什么是观察者模式？\" class=\"headerlink\" title=\"什么是观察者模式？\"></a>什么是观察者模式？</h4><p>我在知乎中找到了一些解释：</p>\n<h5 id=\"第一种解释\"><a href=\"#第一种解释\" class=\"headerlink\" title=\"第一种解释\"></a>第一种解释</h5><blockquote>\n<p>This is a pattern of development in which your class or primary object (known as the Observable) notifies other interested classes or objects (known as Observers) with relevant information (events).</p>\n</blockquote>\n<p>类和主对象（可观察对象）用相关信息（事件）来通知其他感兴趣的类或对象（观察者）。</p>\n<h5 id=\"第二种解释\"><a href=\"#第二种解释\" class=\"headerlink\" title=\"第二种解释\"></a>第二种解释</h5><p>在观察者模式中，观察者需要主动订阅目标事件；在目标发出内容改变的事件后，直接接受事件并作出响应。</p>\n<p>再来谈谈我的理解，举个例子：<br>比如说我对知乎上某个大牛非常感兴趣，喜欢看他的文章，希望有新的文章发布时能够及时的知道，那我只需要关注（订阅）他一下就好了，当有新文章发布的时候，我就能收到通知了。</p>\n<p><img src=\"/images/observer_img2.png\" style=\"display: inline-block !important\"></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>观察者模式中，被观察者是最主要的，可以接受多个订阅者，是一对多的关系。</li>\n<li>观察者模式是一种紧密耦合的设计模式，用起来简单直接，但是扩展性较差。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>前两天一个学弟问了我一个问题，使用面向对象的方式实现下面的功能：<br><img src=\"/images/observer_img1.png\" style=\"display: inline-block !important\"><br>emmmm….，说实话，这问题对我来说有点超纲，自己没怎么使用面向对象的方式写过功能。嘛，正好练习一下吧！<br>仔细分析过后，需要两个类实现人数计算和总人数计算的功能：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 计算数量</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculateNum</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(&#123;el, name&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.el = <span class=\"built_in\">document</span>.getElementById(el);  <span class=\"comment\">// 要绑定的DOM元素</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;  <span class=\"comment\">// 要计算的对象名称，例：成人，儿童</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.input = <span class=\"keyword\">this</span>.el.children[<span class=\"number\">1</span>];  <span class=\"comment\">// 获取输入框</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reduceBtn = <span class=\"keyword\">this</span>.el.children[<span class=\"number\">2</span>];  <span class=\"comment\">// 减法按钮</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.addBtn = <span class=\"keyword\">this</span>.el.children[<span class=\"number\">3</span>];  <span class=\"comment\">// 加法按钮</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.num = <span class=\"number\">0</span>;  <span class=\"comment\">// 数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.init();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  init() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bindAddEvent();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bindReduceEvent();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 绑定加法事件</span></span><br><span class=\"line\">  bindAddEvent() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.addBtn.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.num += <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.input.value = <span class=\"keyword\">this</span>.num;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 绑定减法事件</span></span><br><span class=\"line\">  bindReduce() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reduceBtn.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.num -= <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.input.value = <span class=\"keyword\">this</span>.num;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算总数</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculateTotalNum</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(&#123;el&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.el = <span class=\"built_in\">document</span>.getElementById(el);  <span class=\"comment\">// 获取input元素</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 计算总数</span></span><br><span class=\"line\">  getTotalNum(&#123;name, value&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._data[name] = value;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>._data) &#123;</span><br><span class=\"line\">      n += <span class=\"keyword\">this</span>._data[k];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.el.value = num;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 成人</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> adult = <span class=\"keyword\">new</span> CalculateNum(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'J_adult'</span>,</span><br><span class=\"line\">  name: <span class=\"string\">'adult'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 儿童</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> children = <span class=\"keyword\">new</span> CalculateNum(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'J_children'</span>,</span><br><span class=\"line\">  name: <span class=\"string\">'children'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 总数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> total = <span class=\"keyword\">new</span> CalculateTotalNum(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'J_total'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>接下来就要考虑 <code>adult</code> 和 <code>children</code> 如何将计算的值传递给 <code>total</code> ，告诉 <code>total</code> 我的值被改变了，你要重新计算总数。那么这里涉及到一个设计模式，观察者模式，具体的解释会写在后面。我们先来实现一下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Event</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.eventList = &#123;&#125;;  <span class=\"comment\">// 事件的缓存列表</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 订阅事件</span></span><br><span class=\"line\">  on(eventType, fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fns = <span class=\"keyword\">this</span>.eventList[eventType];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fns) &#123;</span><br><span class=\"line\">      fns = [];</span><br><span class=\"line\">      fns.push(fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 发布事件</span></span><br><span class=\"line\">  emit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> eventType = <span class=\"built_in\">Array</span>.prototype.shift.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fns = <span class=\"keyword\">this</span>.eventList[eventType];</span><br><span class=\"line\"></span><br><span class=\"line\">    fns.map(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> &#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 取消订阅</span></span><br><span class=\"line\">  remove(eventType, fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fns = <span class=\"keyword\">this</span>.eventList[eventType];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fns) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fn) &#123;</span><br><span class=\"line\">      fns &amp;&amp; (fns.length = <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> l = fns.length - <span class=\"number\">1</span>; l &gt;= <span class=\"number\">0</span>; l--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> _fn = fns[l];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_fn === fn) &#123;</span><br><span class=\"line\">          fns.splice(l, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来呢，我们订阅一个 <code>getTotal</code> 事件，当 <code>adult</code> 和 <code>children</code> 的值发生变化时，发布事件就可以了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> event = <span class=\"keyword\">new</span> Event();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 订阅 getTotal 事件</span></span><br><span class=\"line\">event.on(<span class=\"string\">'getTotal'</span>, (&#123;name, value&#125;) =&gt; &#123;</span><br><span class=\"line\">  total.getTotal(&#123;name, value&#125;);  <span class=\"comment\">// 当消息发布后，执行此方法计算总数</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 CalculateNum 中添加发布 getTotal 事件</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculateNum</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  bindAddEvent() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.addBtn.addEventlistener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.num += <span class=\"number\">1</span>;</span><br><span class=\"line\">      event.emit(<span class=\"string\">'getTotal'</span>, &#123;<span class=\"attr\">name</span>: <span class=\"keyword\">this</span>.name, <span class=\"attr\">value</span>: <span class=\"keyword\">this</span>.num&#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  bindReduceEvent() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reduceBtn.addEventlistener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.num -= <span class=\"number\">1</span>;</span><br><span class=\"line\">      event.emit(<span class=\"string\">'getTotal'</span>, &#123;<span class=\"attr\">name</span>: <span class=\"keyword\">this</span>.name, <span class=\"attr\">value</span>: <span class=\"keyword\">this</span>.num&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在以上代码中，创建了一个event实例，用来订阅-发布事件。订阅的 <code>getTotal</code> 事件，接收一个对象，包含两个属性 <code>name</code> 和 <code>value</code> ，<code>name</code> 是用来区分角色，<code>value</code> 是计算后的值。然后在 <code>bindAddEvent</code> 和 <code>bindReduceEvent</code> 方法中，为加减法的点击事件添加了发布事件 <code>getTotal</code> 的代码，将 <code>name</code> 和 <code>value</code> 传递进去。<br>至此，该功能算是完成了。</p>\n<h4 id=\"什么是观察者模式？\"><a href=\"#什么是观察者模式？\" class=\"headerlink\" title=\"什么是观察者模式？\"></a>什么是观察者模式？</h4><p>我在知乎中找到了一些解释：</p>\n<h5 id=\"第一种解释\"><a href=\"#第一种解释\" class=\"headerlink\" title=\"第一种解释\"></a>第一种解释</h5><blockquote>\n<p>This is a pattern of development in which your class or primary object (known as the Observable) notifies other interested classes or objects (known as Observers) with relevant information (events).</p>\n</blockquote>\n<p>类和主对象（可观察对象）用相关信息（事件）来通知其他感兴趣的类或对象（观察者）。</p>\n<h5 id=\"第二种解释\"><a href=\"#第二种解释\" class=\"headerlink\" title=\"第二种解释\"></a>第二种解释</h5><p>在观察者模式中，观察者需要主动订阅目标事件；在目标发出内容改变的事件后，直接接受事件并作出响应。</p>\n<p>再来谈谈我的理解，举个例子：<br>比如说我对知乎上某个大牛非常感兴趣，喜欢看他的文章，希望有新的文章发布时能够及时的知道，那我只需要关注（订阅）他一下就好了，当有新文章发布的时候，我就能收到通知了。</p>\n<p><img src=\"/images/observer_img2.png\" style=\"display: inline-block !important\"></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>观察者模式中，被观察者是最主要的，可以接受多个订阅者，是一对多的关系。</li>\n<li>观察者模式是一种紧密耦合的设计模式，用起来简单直接，但是扩展性较差。</li>\n</ul>\n"},{"title":"Javascript中的this关键字(一)","date":"2018-06-27T08:04:52.000Z","_content":"该文章来自 [David Shariff](http://davidshariff.com/) 的 [Javascript's 'this' keyword](http://davidshariff.com/blog/javascript-this-keyword/#first-article)，因为正在练习英语，所以抱着试试的心态翻译一下此文章，也加入了自己所理解的一些概念，肯定会有理解不到位的地方，请多包涵。\n\n**正文开始**\n在开发过程中，虽然我们经常使用Javascript中的 `this` 关键字 ，但是它经常使人感到迷惑并且误解。`this` 真实的含义到底是什么？怎样正确的理解？\n\n这篇文章试图搞清楚和解释这个问题。\n\n`this` 关键字对于那些使用其他语言编程的人来说并不新鲜，它通常指通过类的构造函数实例化类时创建的新对象。举个例子，如果有一个 `Boat()` 类，其中有一个 `moveBoat()` 方法，那么我们可以确定 `moveBoat()` 方法中的 `this` 指向的是新创建的 `Boat()`。\n\n在Javascript中，当我们使用 `new` 关键字时，**Function 构造函数** 也有这样的概念，然而这并不是全部。 `this` 通常指来自不同的执行环境（context）中的不同对象。我们来看一下例子：\n```Javascript\n// global scope 全局环境\nfoo = 'abc';\nconsole.log(foo);  // => abc\n\nthis.foo = 'def';\nconsole.log(foo)  // => def\n```\n当你在全局环境（不是在function中）中使用 `this` 关键字，它总是指向全局对象。现在让我们看一下 `this` 在function中的例子：\n```Javascript\nlet boat = {\n  size: 'normal',\n  boatInfo: function() {\n    console.log(this === boat);\n    console.log(this.size);\n  }\n}\n\nboat.boatInfo();  // => true, 'normal'\n\nlet bigBoat = {\n  size: 'big'\n};\n\nbigBoat.boatInfo = boat.boatInfo;\nbigBoat.boatInfo();  // => false, 'big'\n```\n那么在上面的代码中 `this` 是如何确定的？我们可以看一下 `boat` 对象中的属性 `size` 和 `boatInfo()` 方法。在 `boatInfo()` 中，会打印两个值，前者打印出Boolean值（如果 `this` 的值是对象 `boat`），后者打印出 `size` 的值。调用 `boat.boatInfo()` 方法就会看到 `this` 的值是对象 `boat`，对象 `boat` 属性 `size` 的值是normal。\n\n我们创建另外一个对象 `bigBoat` ，该对象只有一个 `size` 属性，值为big。我们使用 `bigBoat.boatInfo = boat.boatInfo` ，将 `boat` 中的 `boatInfo` 方法复制给 `bigBoat` 中的 `boatInfo`。当我们调用 `bigBoat.boatInfo()` 方法时，我们看到 `this` 并不等于对象 `boat`，属性 `size` 的值为big。为什么会这样？`boatInfo()` 中的值是如何改变的？\n\n首先你要知道，任何函数的值都不是静态的，每次调用一次函数时都要确定这个值，但是在函数实际执行之前，它是代码。*函数内部的值实际上是由调用函数的父作用域提供的*，更重要的是，实际的函数语法是如何编写的。\n\n不管函数什么时候被调用，我们必须看一下括号 `()` 的左边。如果括号左边能够看到引用，那么传递给函数调用的 `this` 的值就是该对象所属的值，否则就是全局对象。\n换句话说，`this` 的值是最后调用它的对象，也就是看它执行的时候是谁调用的。我们来看一下例子：\n```Javascript\nfunction bar() {\n  console.log(this);\n}\nbar();  // => global，因为bar()方法被调用时属于全局对象\n\nlet foo = {\n  baz: function() {\n    console.log(this);\n  }\n}\nfoo.baz();  // => foo，因为baz()方法被调用时属于foo对象\n```\n相信上面的代码很容易理解。\n我们还可以使用同一个函数来改变 `this` 的值，通过两种不同的方式编写调用语法，使其变得更复杂：\n```Javascript\nlet foo = {\n  baz: function() {\n    console.log(this);\n  }\n}\nfoo.baz();  // foo，因为baz()方法被调用时属于foo对象\n\nvar anotherBaz = foo.baz;\nanotherBaz(); //  global，因为baz()方法被调用时属于全局对象，不是foo\n```\n我们看到 `baz()` 中 `this` 的值每次都是不同的，因为它在语法上以两种不同的方式被调用。现在我们看一下在多层嵌套的对象中 `this` 的值：\n```Javascript\nconst anum = 0;\n\nlet foo = {\n  anum: 10,\n  baz: {\n    anum: 20,\n    bar: function() {\n      console.log(this.anum);\n    }\n  }\n}\nfoo.baz.bar();  // => 20，因为括号左侧是 bar，当被调用时属于baz对象\n\nlet hello = foo.baz.bar;\nhello();  // => 0，因为括号左侧是 hello，当被调用时属于全局对象\n```\n另一个经常被问到的问题是关键字 `this` 如何在事件处理程序中(event handler)确定的？答案是在事件处理程序中 `this` 总是指向被触发的元素。我们来看一下例子：\n```Javascript\n<div id=\"test\">I am an element with id #test</div>\n\nfunction doPrint() {\n  console.log(this.innerHtml);\n}\n\ndoPrint();  // => undefined\n\nlet myElem = document.getElementById('test');\nmyElem.onclick = doPrint;\n\nconsole.log(myElem.onclick === doPrint);\nmyElem.onclick();  // => I am an element with id #test\n```\n我们看到 `doPrint()` 第一个被调用，打印的值为undefined，因为它属于全局对象。然后我们将 `doPrint` 方法复制给了 `myElem.onclick` 事件 ，这基本上意味着无论 `onclick()` 何时被触发，它都是 `myElem` 对象到一个方法，意味着 `this` 的值始终是 `myElem` 对象。\n\n关于这个话题我想说的最后一点，`this` 的值可以使用 `call()` 和 `apply()` 方法手动设置。同样令人感兴趣的是，当在Function 构造函数中调用 `this` 时，`this` 指的是Function 构造函数中所有实例中新创建的对象。原因是Function 构造函数是用 `new` 关键字来调用的，使用 `new` 关键字创建一个新对象时，Function 构造函数中的 `this` 始终指向刚刚创建的新对象。\n\n#### 总结\n希望这篇文章能够解释清楚了所有关于对 `this` 关键字的误解，你可以正确的理解 `this` 的值。我们现在知道了 `this` 的值绝对不是静态的，并且它拥有不同的值取决于怎样调用函数。","source":"_posts/Javascript中的this关键字(一).md","raw":"---\ntitle: Javascript中的this关键字(一)\ndate: 2018-06-27 16:04:52\ncategories:\n- Front-End\ntags: \n- Javascript\n---\n该文章来自 [David Shariff](http://davidshariff.com/) 的 [Javascript's 'this' keyword](http://davidshariff.com/blog/javascript-this-keyword/#first-article)，因为正在练习英语，所以抱着试试的心态翻译一下此文章，也加入了自己所理解的一些概念，肯定会有理解不到位的地方，请多包涵。\n\n**正文开始**\n在开发过程中，虽然我们经常使用Javascript中的 `this` 关键字 ，但是它经常使人感到迷惑并且误解。`this` 真实的含义到底是什么？怎样正确的理解？\n\n这篇文章试图搞清楚和解释这个问题。\n\n`this` 关键字对于那些使用其他语言编程的人来说并不新鲜，它通常指通过类的构造函数实例化类时创建的新对象。举个例子，如果有一个 `Boat()` 类，其中有一个 `moveBoat()` 方法，那么我们可以确定 `moveBoat()` 方法中的 `this` 指向的是新创建的 `Boat()`。\n\n在Javascript中，当我们使用 `new` 关键字时，**Function 构造函数** 也有这样的概念，然而这并不是全部。 `this` 通常指来自不同的执行环境（context）中的不同对象。我们来看一下例子：\n```Javascript\n// global scope 全局环境\nfoo = 'abc';\nconsole.log(foo);  // => abc\n\nthis.foo = 'def';\nconsole.log(foo)  // => def\n```\n当你在全局环境（不是在function中）中使用 `this` 关键字，它总是指向全局对象。现在让我们看一下 `this` 在function中的例子：\n```Javascript\nlet boat = {\n  size: 'normal',\n  boatInfo: function() {\n    console.log(this === boat);\n    console.log(this.size);\n  }\n}\n\nboat.boatInfo();  // => true, 'normal'\n\nlet bigBoat = {\n  size: 'big'\n};\n\nbigBoat.boatInfo = boat.boatInfo;\nbigBoat.boatInfo();  // => false, 'big'\n```\n那么在上面的代码中 `this` 是如何确定的？我们可以看一下 `boat` 对象中的属性 `size` 和 `boatInfo()` 方法。在 `boatInfo()` 中，会打印两个值，前者打印出Boolean值（如果 `this` 的值是对象 `boat`），后者打印出 `size` 的值。调用 `boat.boatInfo()` 方法就会看到 `this` 的值是对象 `boat`，对象 `boat` 属性 `size` 的值是normal。\n\n我们创建另外一个对象 `bigBoat` ，该对象只有一个 `size` 属性，值为big。我们使用 `bigBoat.boatInfo = boat.boatInfo` ，将 `boat` 中的 `boatInfo` 方法复制给 `bigBoat` 中的 `boatInfo`。当我们调用 `bigBoat.boatInfo()` 方法时，我们看到 `this` 并不等于对象 `boat`，属性 `size` 的值为big。为什么会这样？`boatInfo()` 中的值是如何改变的？\n\n首先你要知道，任何函数的值都不是静态的，每次调用一次函数时都要确定这个值，但是在函数实际执行之前，它是代码。*函数内部的值实际上是由调用函数的父作用域提供的*，更重要的是，实际的函数语法是如何编写的。\n\n不管函数什么时候被调用，我们必须看一下括号 `()` 的左边。如果括号左边能够看到引用，那么传递给函数调用的 `this` 的值就是该对象所属的值，否则就是全局对象。\n换句话说，`this` 的值是最后调用它的对象，也就是看它执行的时候是谁调用的。我们来看一下例子：\n```Javascript\nfunction bar() {\n  console.log(this);\n}\nbar();  // => global，因为bar()方法被调用时属于全局对象\n\nlet foo = {\n  baz: function() {\n    console.log(this);\n  }\n}\nfoo.baz();  // => foo，因为baz()方法被调用时属于foo对象\n```\n相信上面的代码很容易理解。\n我们还可以使用同一个函数来改变 `this` 的值，通过两种不同的方式编写调用语法，使其变得更复杂：\n```Javascript\nlet foo = {\n  baz: function() {\n    console.log(this);\n  }\n}\nfoo.baz();  // foo，因为baz()方法被调用时属于foo对象\n\nvar anotherBaz = foo.baz;\nanotherBaz(); //  global，因为baz()方法被调用时属于全局对象，不是foo\n```\n我们看到 `baz()` 中 `this` 的值每次都是不同的，因为它在语法上以两种不同的方式被调用。现在我们看一下在多层嵌套的对象中 `this` 的值：\n```Javascript\nconst anum = 0;\n\nlet foo = {\n  anum: 10,\n  baz: {\n    anum: 20,\n    bar: function() {\n      console.log(this.anum);\n    }\n  }\n}\nfoo.baz.bar();  // => 20，因为括号左侧是 bar，当被调用时属于baz对象\n\nlet hello = foo.baz.bar;\nhello();  // => 0，因为括号左侧是 hello，当被调用时属于全局对象\n```\n另一个经常被问到的问题是关键字 `this` 如何在事件处理程序中(event handler)确定的？答案是在事件处理程序中 `this` 总是指向被触发的元素。我们来看一下例子：\n```Javascript\n<div id=\"test\">I am an element with id #test</div>\n\nfunction doPrint() {\n  console.log(this.innerHtml);\n}\n\ndoPrint();  // => undefined\n\nlet myElem = document.getElementById('test');\nmyElem.onclick = doPrint;\n\nconsole.log(myElem.onclick === doPrint);\nmyElem.onclick();  // => I am an element with id #test\n```\n我们看到 `doPrint()` 第一个被调用，打印的值为undefined，因为它属于全局对象。然后我们将 `doPrint` 方法复制给了 `myElem.onclick` 事件 ，这基本上意味着无论 `onclick()` 何时被触发，它都是 `myElem` 对象到一个方法，意味着 `this` 的值始终是 `myElem` 对象。\n\n关于这个话题我想说的最后一点，`this` 的值可以使用 `call()` 和 `apply()` 方法手动设置。同样令人感兴趣的是，当在Function 构造函数中调用 `this` 时，`this` 指的是Function 构造函数中所有实例中新创建的对象。原因是Function 构造函数是用 `new` 关键字来调用的，使用 `new` 关键字创建一个新对象时，Function 构造函数中的 `this` 始终指向刚刚创建的新对象。\n\n#### 总结\n希望这篇文章能够解释清楚了所有关于对 `this` 关键字的误解，你可以正确的理解 `this` 的值。我们现在知道了 `this` 的值绝对不是静态的，并且它拥有不同的值取决于怎样调用函数。","slug":"Javascript中的this关键字(一)","published":1,"updated":"2018-07-05T02:15:56.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj8g104t0008kouooz8lu78m","content":"<p>该文章来自 <a href=\"http://davidshariff.com/\" target=\"_blank\" rel=\"noopener\">David Shariff</a> 的 <a href=\"http://davidshariff.com/blog/javascript-this-keyword/#first-article\" target=\"_blank\" rel=\"noopener\">Javascript’s ‘this’ keyword</a>，因为正在练习英语，所以抱着试试的心态翻译一下此文章，也加入了自己所理解的一些概念，肯定会有理解不到位的地方，请多包涵。</p>\n<p><strong>正文开始</strong><br>在开发过程中，虽然我们经常使用Javascript中的 <code>this</code> 关键字 ，但是它经常使人感到迷惑并且误解。<code>this</code> 真实的含义到底是什么？怎样正确的理解？</p>\n<p>这篇文章试图搞清楚和解释这个问题。</p>\n<p><code>this</code> 关键字对于那些使用其他语言编程的人来说并不新鲜，它通常指通过类的构造函数实例化类时创建的新对象。举个例子，如果有一个 <code>Boat()</code> 类，其中有一个 <code>moveBoat()</code> 方法，那么我们可以确定 <code>moveBoat()</code> 方法中的 <code>this</code> 指向的是新创建的 <code>Boat()</code>。</p>\n<p>在Javascript中，当我们使用 <code>new</code> 关键字时，<strong>Function 构造函数</strong> 也有这样的概念，然而这并不是全部。 <code>this</code> 通常指来自不同的执行环境（context）中的不同对象。我们来看一下例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// global scope 全局环境</span></span><br><span class=\"line\">foo = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo);  <span class=\"comment\">// =&gt; abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.foo = <span class=\"string\">'def'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo)  <span class=\"comment\">// =&gt; def</span></span><br></pre></td></tr></table></figure></p>\n<p>当你在全局环境（不是在function中）中使用 <code>this</code> 关键字，它总是指向全局对象。现在让我们看一下 <code>this</code> 在function中的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> boat = &#123;</span><br><span class=\"line\">  size: <span class=\"string\">'normal'</span>,</span><br><span class=\"line\">  boatInfo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === boat);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.size);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">boat.boatInfo();  <span class=\"comment\">// =&gt; true, 'normal'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> bigBoat = &#123;</span><br><span class=\"line\">  size: <span class=\"string\">'big'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">bigBoat.boatInfo = boat.boatInfo;</span><br><span class=\"line\">bigBoat.boatInfo();  <span class=\"comment\">// =&gt; false, 'big'</span></span><br></pre></td></tr></table></figure></p>\n<p>那么在上面的代码中 <code>this</code> 是如何确定的？我们可以看一下 <code>boat</code> 对象中的属性 <code>size</code> 和 <code>boatInfo()</code> 方法。在 <code>boatInfo()</code> 中，会打印两个值，前者打印出Boolean值（如果 <code>this</code> 的值是对象 <code>boat</code>），后者打印出 <code>size</code> 的值。调用 <code>boat.boatInfo()</code> 方法就会看到 <code>this</code> 的值是对象 <code>boat</code>，对象 <code>boat</code> 属性 <code>size</code> 的值是normal。</p>\n<p>我们创建另外一个对象 <code>bigBoat</code> ，该对象只有一个 <code>size</code> 属性，值为big。我们使用 <code>bigBoat.boatInfo = boat.boatInfo</code> ，将 <code>boat</code> 中的 <code>boatInfo</code> 方法复制给 <code>bigBoat</code> 中的 <code>boatInfo</code>。当我们调用 <code>bigBoat.boatInfo()</code> 方法时，我们看到 <code>this</code> 并不等于对象 <code>boat</code>，属性 <code>size</code> 的值为big。为什么会这样？<code>boatInfo()</code> 中的值是如何改变的？</p>\n<p>首先你要知道，任何函数的值都不是静态的，每次调用一次函数时都要确定这个值，但是在函数实际执行之前，它是代码。<em>函数内部的值实际上是由调用函数的父作用域提供的</em>，更重要的是，实际的函数语法是如何编写的。</p>\n<p>不管函数什么时候被调用，我们必须看一下括号 <code>()</code> 的左边。如果括号左边能够看到引用，那么传递给函数调用的 <code>this</code> 的值就是该对象所属的值，否则就是全局对象。<br>换句话说，<code>this</code> 的值是最后调用它的对象，也就是看它执行的时候是谁调用的。我们来看一下例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar();  <span class=\"comment\">// =&gt; global，因为bar()方法被调用时属于全局对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">  baz: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.baz();  <span class=\"comment\">// =&gt; foo，因为baz()方法被调用时属于foo对象</span></span><br></pre></td></tr></table></figure></p>\n<p>相信上面的代码很容易理解。<br>我们还可以使用同一个函数来改变 <code>this</code> 的值，通过两种不同的方式编写调用语法，使其变得更复杂：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">  baz: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.baz();  <span class=\"comment\">// foo，因为baz()方法被调用时属于foo对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherBaz = foo.baz;</span><br><span class=\"line\">anotherBaz(); <span class=\"comment\">//  global，因为baz()方法被调用时属于全局对象，不是foo</span></span><br></pre></td></tr></table></figure></p>\n<p>我们看到 <code>baz()</code> 中 <code>this</code> 的值每次都是不同的，因为它在语法上以两种不同的方式被调用。现在我们看一下在多层嵌套的对象中 <code>this</code> 的值：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> anum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">  anum: <span class=\"number\">10</span>,</span><br><span class=\"line\">  baz: &#123;</span><br><span class=\"line\">    anum: <span class=\"number\">20</span>,</span><br><span class=\"line\">    bar: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.anum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.baz.bar();  <span class=\"comment\">// =&gt; 20，因为括号左侧是 bar，当被调用时属于baz对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> hello = foo.baz.bar;</span><br><span class=\"line\">hello();  <span class=\"comment\">// =&gt; 0，因为括号左侧是 hello，当被调用时属于全局对象</span></span><br></pre></td></tr></table></figure></p>\n<p>另一个经常被问到的问题是关键字 <code>this</code> 如何在事件处理程序中(event handler)确定的？答案是在事件处理程序中 <code>this</code> 总是指向被触发的元素。我们来看一下例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=\"test\"&gt;I am an element with id #test&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doPrint</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.innerHtml);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">doPrint();  <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myElem = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">myElem.onclick = doPrint;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myElem.onclick === doPrint);</span><br><span class=\"line\">myElem.onclick();  <span class=\"comment\">// =&gt; I am an element with id #test</span></span><br></pre></td></tr></table></figure></p>\n<p>我们看到 <code>doPrint()</code> 第一个被调用，打印的值为undefined，因为它属于全局对象。然后我们将 <code>doPrint</code> 方法复制给了 <code>myElem.onclick</code> 事件 ，这基本上意味着无论 <code>onclick()</code> 何时被触发，它都是 <code>myElem</code> 对象到一个方法，意味着 <code>this</code> 的值始终是 <code>myElem</code> 对象。</p>\n<p>关于这个话题我想说的最后一点，<code>this</code> 的值可以使用 <code>call()</code> 和 <code>apply()</code> 方法手动设置。同样令人感兴趣的是，当在Function 构造函数中调用 <code>this</code> 时，<code>this</code> 指的是Function 构造函数中所有实例中新创建的对象。原因是Function 构造函数是用 <code>new</code> 关键字来调用的，使用 <code>new</code> 关键字创建一个新对象时，Function 构造函数中的 <code>this</code> 始终指向刚刚创建的新对象。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>希望这篇文章能够解释清楚了所有关于对 <code>this</code> 关键字的误解，你可以正确的理解 <code>this</code> 的值。我们现在知道了 <code>this</code> 的值绝对不是静态的，并且它拥有不同的值取决于怎样调用函数。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>该文章来自 <a href=\"http://davidshariff.com/\" target=\"_blank\" rel=\"noopener\">David Shariff</a> 的 <a href=\"http://davidshariff.com/blog/javascript-this-keyword/#first-article\" target=\"_blank\" rel=\"noopener\">Javascript’s ‘this’ keyword</a>，因为正在练习英语，所以抱着试试的心态翻译一下此文章，也加入了自己所理解的一些概念，肯定会有理解不到位的地方，请多包涵。</p>\n<p><strong>正文开始</strong><br>在开发过程中，虽然我们经常使用Javascript中的 <code>this</code> 关键字 ，但是它经常使人感到迷惑并且误解。<code>this</code> 真实的含义到底是什么？怎样正确的理解？</p>\n<p>这篇文章试图搞清楚和解释这个问题。</p>\n<p><code>this</code> 关键字对于那些使用其他语言编程的人来说并不新鲜，它通常指通过类的构造函数实例化类时创建的新对象。举个例子，如果有一个 <code>Boat()</code> 类，其中有一个 <code>moveBoat()</code> 方法，那么我们可以确定 <code>moveBoat()</code> 方法中的 <code>this</code> 指向的是新创建的 <code>Boat()</code>。</p>\n<p>在Javascript中，当我们使用 <code>new</code> 关键字时，<strong>Function 构造函数</strong> 也有这样的概念，然而这并不是全部。 <code>this</code> 通常指来自不同的执行环境（context）中的不同对象。我们来看一下例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// global scope 全局环境</span></span><br><span class=\"line\">foo = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo);  <span class=\"comment\">// =&gt; abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.foo = <span class=\"string\">'def'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo)  <span class=\"comment\">// =&gt; def</span></span><br></pre></td></tr></table></figure></p>\n<p>当你在全局环境（不是在function中）中使用 <code>this</code> 关键字，它总是指向全局对象。现在让我们看一下 <code>this</code> 在function中的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> boat = &#123;</span><br><span class=\"line\">  size: <span class=\"string\">'normal'</span>,</span><br><span class=\"line\">  boatInfo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === boat);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.size);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">boat.boatInfo();  <span class=\"comment\">// =&gt; true, 'normal'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> bigBoat = &#123;</span><br><span class=\"line\">  size: <span class=\"string\">'big'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">bigBoat.boatInfo = boat.boatInfo;</span><br><span class=\"line\">bigBoat.boatInfo();  <span class=\"comment\">// =&gt; false, 'big'</span></span><br></pre></td></tr></table></figure></p>\n<p>那么在上面的代码中 <code>this</code> 是如何确定的？我们可以看一下 <code>boat</code> 对象中的属性 <code>size</code> 和 <code>boatInfo()</code> 方法。在 <code>boatInfo()</code> 中，会打印两个值，前者打印出Boolean值（如果 <code>this</code> 的值是对象 <code>boat</code>），后者打印出 <code>size</code> 的值。调用 <code>boat.boatInfo()</code> 方法就会看到 <code>this</code> 的值是对象 <code>boat</code>，对象 <code>boat</code> 属性 <code>size</code> 的值是normal。</p>\n<p>我们创建另外一个对象 <code>bigBoat</code> ，该对象只有一个 <code>size</code> 属性，值为big。我们使用 <code>bigBoat.boatInfo = boat.boatInfo</code> ，将 <code>boat</code> 中的 <code>boatInfo</code> 方法复制给 <code>bigBoat</code> 中的 <code>boatInfo</code>。当我们调用 <code>bigBoat.boatInfo()</code> 方法时，我们看到 <code>this</code> 并不等于对象 <code>boat</code>，属性 <code>size</code> 的值为big。为什么会这样？<code>boatInfo()</code> 中的值是如何改变的？</p>\n<p>首先你要知道，任何函数的值都不是静态的，每次调用一次函数时都要确定这个值，但是在函数实际执行之前，它是代码。<em>函数内部的值实际上是由调用函数的父作用域提供的</em>，更重要的是，实际的函数语法是如何编写的。</p>\n<p>不管函数什么时候被调用，我们必须看一下括号 <code>()</code> 的左边。如果括号左边能够看到引用，那么传递给函数调用的 <code>this</code> 的值就是该对象所属的值，否则就是全局对象。<br>换句话说，<code>this</code> 的值是最后调用它的对象，也就是看它执行的时候是谁调用的。我们来看一下例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar();  <span class=\"comment\">// =&gt; global，因为bar()方法被调用时属于全局对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">  baz: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.baz();  <span class=\"comment\">// =&gt; foo，因为baz()方法被调用时属于foo对象</span></span><br></pre></td></tr></table></figure></p>\n<p>相信上面的代码很容易理解。<br>我们还可以使用同一个函数来改变 <code>this</code> 的值，通过两种不同的方式编写调用语法，使其变得更复杂：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">  baz: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.baz();  <span class=\"comment\">// foo，因为baz()方法被调用时属于foo对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherBaz = foo.baz;</span><br><span class=\"line\">anotherBaz(); <span class=\"comment\">//  global，因为baz()方法被调用时属于全局对象，不是foo</span></span><br></pre></td></tr></table></figure></p>\n<p>我们看到 <code>baz()</code> 中 <code>this</code> 的值每次都是不同的，因为它在语法上以两种不同的方式被调用。现在我们看一下在多层嵌套的对象中 <code>this</code> 的值：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> anum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">  anum: <span class=\"number\">10</span>,</span><br><span class=\"line\">  baz: &#123;</span><br><span class=\"line\">    anum: <span class=\"number\">20</span>,</span><br><span class=\"line\">    bar: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.anum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.baz.bar();  <span class=\"comment\">// =&gt; 20，因为括号左侧是 bar，当被调用时属于baz对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> hello = foo.baz.bar;</span><br><span class=\"line\">hello();  <span class=\"comment\">// =&gt; 0，因为括号左侧是 hello，当被调用时属于全局对象</span></span><br></pre></td></tr></table></figure></p>\n<p>另一个经常被问到的问题是关键字 <code>this</code> 如何在事件处理程序中(event handler)确定的？答案是在事件处理程序中 <code>this</code> 总是指向被触发的元素。我们来看一下例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=\"test\"&gt;I am an element with id #test&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doPrint</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.innerHtml);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">doPrint();  <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myElem = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">myElem.onclick = doPrint;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myElem.onclick === doPrint);</span><br><span class=\"line\">myElem.onclick();  <span class=\"comment\">// =&gt; I am an element with id #test</span></span><br></pre></td></tr></table></figure></p>\n<p>我们看到 <code>doPrint()</code> 第一个被调用，打印的值为undefined，因为它属于全局对象。然后我们将 <code>doPrint</code> 方法复制给了 <code>myElem.onclick</code> 事件 ，这基本上意味着无论 <code>onclick()</code> 何时被触发，它都是 <code>myElem</code> 对象到一个方法，意味着 <code>this</code> 的值始终是 <code>myElem</code> 对象。</p>\n<p>关于这个话题我想说的最后一点，<code>this</code> 的值可以使用 <code>call()</code> 和 <code>apply()</code> 方法手动设置。同样令人感兴趣的是，当在Function 构造函数中调用 <code>this</code> 时，<code>this</code> 指的是Function 构造函数中所有实例中新创建的对象。原因是Function 构造函数是用 <code>new</code> 关键字来调用的，使用 <code>new</code> 关键字创建一个新对象时，Function 构造函数中的 <code>this</code> 始终指向刚刚创建的新对象。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>希望这篇文章能够解释清楚了所有关于对 <code>this</code> 关键字的误解，你可以正确的理解 <code>this</code> 的值。我们现在知道了 <code>this</code> 的值绝对不是静态的，并且它拥有不同的值取决于怎样调用函数。</p>\n"},{"title":"vue开发音乐APP学习总结(二)","date":"2018-06-26T03:18:13.000Z","_content":"## 3. mixins\n在这个项目的开发中，使用了Vue的 `mixins`，将多个业务模块的重复代码全都提取出来进行了复用，让我感受到了mixin的魅力。\n\n#### 解释\n> `mixins` 选项接受一个混入对象的数组。这些混入实例对象可以像正常的实例对象一样包含选项，他们将在 `Vue.extend()` 里最终选择使用相同的选项合并逻辑合并。举例：如果你的混入包含一个钩子而创建组件本身也有一个，两个函数将被调用。\nMixin 钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用。\n-- Vue.js API [#mixins](https://cn.vuejs.org/v2/api/#mixins)\n\n#### 示例\n```Javascript\nvar mixin = {\n  created() {\n    console.log(1);\n  }\n}\nvar vm = new Vue({\n  created() {\n      console.log(2);\n  },\n  mixins: [mixin]\n})\n\n// => 1\n// => 2\n```\n\n#### 使用方法\n在开发过程中，不少业务组件共用相同的代码，都可以提取到mixin中。\n\n##### 示例：搜索业务\n```Javascript\nexport const searchMixin = {\n  data() {\n    return {\n      query: ''  // 多个业务组件调用一个公共组件，需要传一样的参数\n    };\n  },\n  computed: {\n    ...mapGetters([\n      'searchHistory' // 多个业务组件需要使用该state属性\n    ])\n  },\n  // 公共方法\n  methods: {\n    addQuery(query) {\n      this.$refs.searchBox.setQuery(query);\n    },\n    onQueryChange(query) {\n      this.query = query;\n    },\n    blurInput() {\n      this.$refs.searchBox.blur();\n    },\n    saveSearch() {\n      this.saveSearchHistory(this.query);\n    },\n    ...mapActions([\n      'saveSearchHistory',\n      'deleteSearchHistory'\n    ])\n  }\n};\n```\n添加到要使用的组件中：\n```Html\n<template>\n  <div>\n    <search-list\n      @select=\"addQuery\"\n      @delete=\"deleteSearchHistory\" // 使用了mixin中的mapActions的方法\n      :searches=\"searchHistory\"\n    >\n    </search-list>\n  </div>\n</template>\n<script>\nimport { searchMixin } from 'common/js/mixin';\n\nexport default {\n  mixins: [\n    searchMixin\n  ],\n  methods: {\n    onQueryChange(query) {\n      this.query = query;  // 使用了mixin中的data对象的属性\n    }\n  }\n}\n</script>\n```\n简而言之，在mixin中添加的data、computed、methods、watch及hook等都会合并到该组件实例中，可以进行调用。\n这样大大减少了代码冗余，提高了灵活性，各个业务组件虽然共用相同的属性及方法，却是独立互不干扰的，为以后的业务扩展提供了极大的方便。\n\n## 4. keep-alive\n\n在vue-music项目中，有4个导航的切换。\n导航每次切换时，组件都会再次请求数据并重新渲染，这样的体验很不好，并且增加了网络请求的次数。\n<img src=\"/images/keep_alive.gif\" style=\"display: inline-block !important\">\n\n使用 `keep-alive` 可解决此问题。\n\n#### 使用方法\n```Html\n<keep-alive>\n  <component></component>\n</keep-alive>\n```\n将需要缓存的组件嵌套在 `keep-alive` 标签中，即可缓存该组件。\n在vue-music项目中四个组件注册在了路由中，并且每个组件都有网络请求，所以为了把所有组件都缓存下来，我将 `router-view` 嵌套在了 `keep-alive` 中。\n```Html\n<template>\n  <div id=\"app\">\n    ...\n    <keep-alive>\n      <router-view/>\n    </keep-alive>\n    ...\n  </div>\n</template>\n```\n\n来看一下使用 `keep-alive` 之后的效果：\n<img src=\"/images/keep_alive2.gif\" style=\"display: inline-block !important\">\n\n#### 扩展\nVue.js 2.1.0 新增了两个属性：\n- include\n- exclude\n\n> `include` 和 `exclude` 属性允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示：\n\n```Html\n<!-- 逗号分隔字符串 -->\n<keep-alive include=\"a,b\">\n  <component :is=\"view\"></component>\n</keep-alive>\n\n<!-- 正则表达式 (使用 `v-bind`) -->\n<keep-alive :include=\"/a|b/\">\n  <component :is=\"view\"></component>\n</keep-alive>\n\n<!-- 数组 (使用 `v-bind`) -->\n<keep-alive :include=\"['a', 'b']\">\n  <component :is=\"view\"></component>\n</keep-alive>\n```\n匹配首先检查组件自身的 `name` 选项，如果 `name` 选项不可用，则匹配它的局部注册名称 (父组件 `components` 选项的键值)。匿名组件不能被匹配。\n\n#### 示例\n还是看vue-music中的代码，如果只想缓存两个组件的话，可以这样做：\n\n先为每个组件添加 `name` 属性。\n```Javascript\n...\nexport default {\n  name: 'recommend'\n  ...\n}\n```\n\n然后在 `keep-alive` 中添加要缓存的组件名：\n```Html\n<template>\n  <div id=\"app\">\n    ...\n    <keep-alive :include=\"['recommend', 'search']\">\n      <router-view/>\n    </keep-alive>\n    ...\n  </div>\n</template>\n```\n看效果：\n<img src=\"/images/keep_alive3.gif\" style=\"display: inline-block !important\">\n只有歌手和排行页面在每次切换时会再次进行网络请求，推荐和搜索在首次加载后进行了缓存。\n这里我使用了数组的形式传递，当然使用正则表达式匹配也是没有问题的。\n但是使用字符串格式进行匹配，只会对第一个组件进行缓存：\n```Html\n<template>\n  <div id=\"app\">\n    ...\n    <keep-alive include=\"recommend, search\">\n      <router-view/>\n    </keep-alive>\n    ...\n  </div>\n</template>\n```\n尚未确定到底是什么问题。\n\n`exclude` 属性顾名思义，匹配到的组件是不进行缓存的。","source":"_posts/vue开发音乐APP学习总结(二).md","raw":"---\ntitle: vue开发音乐APP学习总结(二)\ndate: 2018-06-26 11:18:13\ncategories:\n- Front-End\ntags:\n- Vue.js\n---\n## 3. mixins\n在这个项目的开发中，使用了Vue的 `mixins`，将多个业务模块的重复代码全都提取出来进行了复用，让我感受到了mixin的魅力。\n\n#### 解释\n> `mixins` 选项接受一个混入对象的数组。这些混入实例对象可以像正常的实例对象一样包含选项，他们将在 `Vue.extend()` 里最终选择使用相同的选项合并逻辑合并。举例：如果你的混入包含一个钩子而创建组件本身也有一个，两个函数将被调用。\nMixin 钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用。\n-- Vue.js API [#mixins](https://cn.vuejs.org/v2/api/#mixins)\n\n#### 示例\n```Javascript\nvar mixin = {\n  created() {\n    console.log(1);\n  }\n}\nvar vm = new Vue({\n  created() {\n      console.log(2);\n  },\n  mixins: [mixin]\n})\n\n// => 1\n// => 2\n```\n\n#### 使用方法\n在开发过程中，不少业务组件共用相同的代码，都可以提取到mixin中。\n\n##### 示例：搜索业务\n```Javascript\nexport const searchMixin = {\n  data() {\n    return {\n      query: ''  // 多个业务组件调用一个公共组件，需要传一样的参数\n    };\n  },\n  computed: {\n    ...mapGetters([\n      'searchHistory' // 多个业务组件需要使用该state属性\n    ])\n  },\n  // 公共方法\n  methods: {\n    addQuery(query) {\n      this.$refs.searchBox.setQuery(query);\n    },\n    onQueryChange(query) {\n      this.query = query;\n    },\n    blurInput() {\n      this.$refs.searchBox.blur();\n    },\n    saveSearch() {\n      this.saveSearchHistory(this.query);\n    },\n    ...mapActions([\n      'saveSearchHistory',\n      'deleteSearchHistory'\n    ])\n  }\n};\n```\n添加到要使用的组件中：\n```Html\n<template>\n  <div>\n    <search-list\n      @select=\"addQuery\"\n      @delete=\"deleteSearchHistory\" // 使用了mixin中的mapActions的方法\n      :searches=\"searchHistory\"\n    >\n    </search-list>\n  </div>\n</template>\n<script>\nimport { searchMixin } from 'common/js/mixin';\n\nexport default {\n  mixins: [\n    searchMixin\n  ],\n  methods: {\n    onQueryChange(query) {\n      this.query = query;  // 使用了mixin中的data对象的属性\n    }\n  }\n}\n</script>\n```\n简而言之，在mixin中添加的data、computed、methods、watch及hook等都会合并到该组件实例中，可以进行调用。\n这样大大减少了代码冗余，提高了灵活性，各个业务组件虽然共用相同的属性及方法，却是独立互不干扰的，为以后的业务扩展提供了极大的方便。\n\n## 4. keep-alive\n\n在vue-music项目中，有4个导航的切换。\n导航每次切换时，组件都会再次请求数据并重新渲染，这样的体验很不好，并且增加了网络请求的次数。\n<img src=\"/images/keep_alive.gif\" style=\"display: inline-block !important\">\n\n使用 `keep-alive` 可解决此问题。\n\n#### 使用方法\n```Html\n<keep-alive>\n  <component></component>\n</keep-alive>\n```\n将需要缓存的组件嵌套在 `keep-alive` 标签中，即可缓存该组件。\n在vue-music项目中四个组件注册在了路由中，并且每个组件都有网络请求，所以为了把所有组件都缓存下来，我将 `router-view` 嵌套在了 `keep-alive` 中。\n```Html\n<template>\n  <div id=\"app\">\n    ...\n    <keep-alive>\n      <router-view/>\n    </keep-alive>\n    ...\n  </div>\n</template>\n```\n\n来看一下使用 `keep-alive` 之后的效果：\n<img src=\"/images/keep_alive2.gif\" style=\"display: inline-block !important\">\n\n#### 扩展\nVue.js 2.1.0 新增了两个属性：\n- include\n- exclude\n\n> `include` 和 `exclude` 属性允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示：\n\n```Html\n<!-- 逗号分隔字符串 -->\n<keep-alive include=\"a,b\">\n  <component :is=\"view\"></component>\n</keep-alive>\n\n<!-- 正则表达式 (使用 `v-bind`) -->\n<keep-alive :include=\"/a|b/\">\n  <component :is=\"view\"></component>\n</keep-alive>\n\n<!-- 数组 (使用 `v-bind`) -->\n<keep-alive :include=\"['a', 'b']\">\n  <component :is=\"view\"></component>\n</keep-alive>\n```\n匹配首先检查组件自身的 `name` 选项，如果 `name` 选项不可用，则匹配它的局部注册名称 (父组件 `components` 选项的键值)。匿名组件不能被匹配。\n\n#### 示例\n还是看vue-music中的代码，如果只想缓存两个组件的话，可以这样做：\n\n先为每个组件添加 `name` 属性。\n```Javascript\n...\nexport default {\n  name: 'recommend'\n  ...\n}\n```\n\n然后在 `keep-alive` 中添加要缓存的组件名：\n```Html\n<template>\n  <div id=\"app\">\n    ...\n    <keep-alive :include=\"['recommend', 'search']\">\n      <router-view/>\n    </keep-alive>\n    ...\n  </div>\n</template>\n```\n看效果：\n<img src=\"/images/keep_alive3.gif\" style=\"display: inline-block !important\">\n只有歌手和排行页面在每次切换时会再次进行网络请求，推荐和搜索在首次加载后进行了缓存。\n这里我使用了数组的形式传递，当然使用正则表达式匹配也是没有问题的。\n但是使用字符串格式进行匹配，只会对第一个组件进行缓存：\n```Html\n<template>\n  <div id=\"app\">\n    ...\n    <keep-alive include=\"recommend, search\">\n      <router-view/>\n    </keep-alive>\n    ...\n  </div>\n</template>\n```\n尚未确定到底是什么问题。\n\n`exclude` 属性顾名思义，匹配到的组件是不进行缓存的。","slug":"vue开发音乐APP学习总结(二)","published":1,"updated":"2018-07-05T02:49:55.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj8g104y000ckouo05g86m1k","content":"<h2 id=\"3-mixins\"><a href=\"#3-mixins\" class=\"headerlink\" title=\"3. mixins\"></a>3. mixins</h2><p>在这个项目的开发中，使用了Vue的 <code>mixins</code>，将多个业务模块的重复代码全都提取出来进行了复用，让我感受到了mixin的魅力。</p>\n<h4 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h4><blockquote>\n<p><code>mixins</code> 选项接受一个混入对象的数组。这些混入实例对象可以像正常的实例对象一样包含选项，他们将在 <code>Vue.extend()</code> 里最终选择使用相同的选项合并逻辑合并。举例：如果你的混入包含一个钩子而创建组件本身也有一个，两个函数将被调用。<br>Mixin 钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用。<br>– Vue.js API <a href=\"https://cn.vuejs.org/v2/api/#mixins\" target=\"_blank\" rel=\"noopener\">#mixins</a></p>\n</blockquote>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mixin = &#123;</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mixins: [mixin]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 2</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><p>在开发过程中，不少业务组件共用相同的代码，都可以提取到mixin中。</p>\n<h5 id=\"示例：搜索业务\"><a href=\"#示例：搜索业务\" class=\"headerlink\" title=\"示例：搜索业务\"></a>示例：搜索业务</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> searchMixin = &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      query: <span class=\"string\">''</span>  <span class=\"comment\">// 多个业务组件调用一个公共组件，需要传一样的参数</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    ...mapGetters([</span><br><span class=\"line\">      <span class=\"string\">'searchHistory'</span> <span class=\"comment\">// 多个业务组件需要使用该state属性</span></span><br><span class=\"line\">    ])</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 公共方法</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    addQuery(query) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$refs.searchBox.setQuery(query);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onQueryChange(query) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.query = query;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    blurInput() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$refs.searchBox.blur();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    saveSearch() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.saveSearchHistory(<span class=\"keyword\">this</span>.query);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...mapActions([</span><br><span class=\"line\">      <span class=\"string\">'saveSearchHistory'</span>,</span><br><span class=\"line\">      <span class=\"string\">'deleteSearchHistory'</span></span><br><span class=\"line\">    ])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>添加到要使用的组件中：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">search-list</span></span></span><br><span class=\"line\"><span class=\"tag\">      @<span class=\"attr\">select</span>=<span class=\"string\">\"addQuery\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      @<span class=\"attr\">delete</span>=<span class=\"string\">\"deleteSearchHistory\"</span> // 使用了<span class=\"attr\">mixin</span>中的<span class=\"attr\">mapActions</span>的方法</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:searches</span>=<span class=\"string\">\"searchHistory\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">search-list</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123; searchMixin &#125; <span class=\"keyword\">from</span> <span class=\"string\">'common/js/mixin'</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  mixins: [</span></span><br><span class=\"line\"><span class=\"undefined\">    searchMixin</span></span><br><span class=\"line\"><span class=\"undefined\">  ],</span></span><br><span class=\"line\"><span class=\"undefined\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    onQueryChange(query) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.query = query;  <span class=\"comment\">// 使用了mixin中的data对象的属性</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>简而言之，在mixin中添加的data、computed、methods、watch及hook等都会合并到该组件实例中，可以进行调用。<br>这样大大减少了代码冗余，提高了灵活性，各个业务组件虽然共用相同的属性及方法，却是独立互不干扰的，为以后的业务扩展提供了极大的方便。</p>\n<h2 id=\"4-keep-alive\"><a href=\"#4-keep-alive\" class=\"headerlink\" title=\"4. keep-alive\"></a>4. keep-alive</h2><p>在vue-music项目中，有4个导航的切换。<br>导航每次切换时，组件都会再次请求数据并重新渲染，这样的体验很不好，并且增加了网络请求的次数。<br><img src=\"/images/keep_alive.gif\" style=\"display: inline-block !important\"></p>\n<p>使用 <code>keep-alive</code> 可解决此问题。</p>\n<h4 id=\"使用方法-1\"><a href=\"#使用方法-1\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>将需要缓存的组件嵌套在 <code>keep-alive</code> 标签中，即可缓存该组件。<br>在vue-music项目中四个组件注册在了路由中，并且每个组件都有网络请求，所以为了把所有组件都缓存下来，我将 <code>router-view</code> 嵌套在了 <code>keep-alive</code> 中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-view</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>来看一下使用 <code>keep-alive</code> 之后的效果：<br><img src=\"/images/keep_alive2.gif\" style=\"display: inline-block !important\"></p>\n<h4 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h4><p>Vue.js 2.1.0 新增了两个属性：</p>\n<ul>\n<li>include</li>\n<li>exclude</li>\n</ul>\n<blockquote>\n<p><code>include</code> 和 <code>exclude</code> 属性允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 逗号分隔字符串 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">include</span>=<span class=\"string\">\"a,b\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 正则表达式 (使用 `v-bind`) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">\"/a|b/\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 数组 (使用 `v-bind`) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">\"['a', 'b']\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>匹配首先检查组件自身的 <code>name</code> 选项，如果 <code>name</code> 选项不可用，则匹配它的局部注册名称 (父组件 <code>components</code> 选项的键值)。匿名组件不能被匹配。</p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>还是看vue-music中的代码，如果只想缓存两个组件的话，可以这样做：</p>\n<p>先为每个组件添加 <code>name</code> 属性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'recommend'</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在 <code>keep-alive</code> 中添加要缓存的组件名：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">\"['recommend', 'search']\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-view</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>看效果：<br><img src=\"/images/keep_alive3.gif\" style=\"display: inline-block !important\"><br>只有歌手和排行页面在每次切换时会再次进行网络请求，推荐和搜索在首次加载后进行了缓存。<br>这里我使用了数组的形式传递，当然使用正则表达式匹配也是没有问题的。<br>但是使用字符串格式进行匹配，只会对第一个组件进行缓存：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">include</span>=<span class=\"string\">\"recommend, search\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-view</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>尚未确定到底是什么问题。</p>\n<p><code>exclude</code> 属性顾名思义，匹配到的组件是不进行缓存的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"3-mixins\"><a href=\"#3-mixins\" class=\"headerlink\" title=\"3. mixins\"></a>3. mixins</h2><p>在这个项目的开发中，使用了Vue的 <code>mixins</code>，将多个业务模块的重复代码全都提取出来进行了复用，让我感受到了mixin的魅力。</p>\n<h4 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h4><blockquote>\n<p><code>mixins</code> 选项接受一个混入对象的数组。这些混入实例对象可以像正常的实例对象一样包含选项，他们将在 <code>Vue.extend()</code> 里最终选择使用相同的选项合并逻辑合并。举例：如果你的混入包含一个钩子而创建组件本身也有一个，两个函数将被调用。<br>Mixin 钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用。<br>– Vue.js API <a href=\"https://cn.vuejs.org/v2/api/#mixins\" target=\"_blank\" rel=\"noopener\">#mixins</a></p>\n</blockquote>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mixin = &#123;</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mixins: [mixin]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 2</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><p>在开发过程中，不少业务组件共用相同的代码，都可以提取到mixin中。</p>\n<h5 id=\"示例：搜索业务\"><a href=\"#示例：搜索业务\" class=\"headerlink\" title=\"示例：搜索业务\"></a>示例：搜索业务</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> searchMixin = &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      query: <span class=\"string\">''</span>  <span class=\"comment\">// 多个业务组件调用一个公共组件，需要传一样的参数</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    ...mapGetters([</span><br><span class=\"line\">      <span class=\"string\">'searchHistory'</span> <span class=\"comment\">// 多个业务组件需要使用该state属性</span></span><br><span class=\"line\">    ])</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 公共方法</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    addQuery(query) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$refs.searchBox.setQuery(query);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onQueryChange(query) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.query = query;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    blurInput() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$refs.searchBox.blur();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    saveSearch() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.saveSearchHistory(<span class=\"keyword\">this</span>.query);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...mapActions([</span><br><span class=\"line\">      <span class=\"string\">'saveSearchHistory'</span>,</span><br><span class=\"line\">      <span class=\"string\">'deleteSearchHistory'</span></span><br><span class=\"line\">    ])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>添加到要使用的组件中：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">search-list</span></span></span><br><span class=\"line\"><span class=\"tag\">      @<span class=\"attr\">select</span>=<span class=\"string\">\"addQuery\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      @<span class=\"attr\">delete</span>=<span class=\"string\">\"deleteSearchHistory\"</span> // 使用了<span class=\"attr\">mixin</span>中的<span class=\"attr\">mapActions</span>的方法</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:searches</span>=<span class=\"string\">\"searchHistory\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">search-list</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123; searchMixin &#125; <span class=\"keyword\">from</span> <span class=\"string\">'common/js/mixin'</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  mixins: [</span></span><br><span class=\"line\"><span class=\"undefined\">    searchMixin</span></span><br><span class=\"line\"><span class=\"undefined\">  ],</span></span><br><span class=\"line\"><span class=\"undefined\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    onQueryChange(query) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.query = query;  <span class=\"comment\">// 使用了mixin中的data对象的属性</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>简而言之，在mixin中添加的data、computed、methods、watch及hook等都会合并到该组件实例中，可以进行调用。<br>这样大大减少了代码冗余，提高了灵活性，各个业务组件虽然共用相同的属性及方法，却是独立互不干扰的，为以后的业务扩展提供了极大的方便。</p>\n<h2 id=\"4-keep-alive\"><a href=\"#4-keep-alive\" class=\"headerlink\" title=\"4. keep-alive\"></a>4. keep-alive</h2><p>在vue-music项目中，有4个导航的切换。<br>导航每次切换时，组件都会再次请求数据并重新渲染，这样的体验很不好，并且增加了网络请求的次数。<br><img src=\"/images/keep_alive.gif\" style=\"display: inline-block !important\"></p>\n<p>使用 <code>keep-alive</code> 可解决此问题。</p>\n<h4 id=\"使用方法-1\"><a href=\"#使用方法-1\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>将需要缓存的组件嵌套在 <code>keep-alive</code> 标签中，即可缓存该组件。<br>在vue-music项目中四个组件注册在了路由中，并且每个组件都有网络请求，所以为了把所有组件都缓存下来，我将 <code>router-view</code> 嵌套在了 <code>keep-alive</code> 中。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-view</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>来看一下使用 <code>keep-alive</code> 之后的效果：<br><img src=\"/images/keep_alive2.gif\" style=\"display: inline-block !important\"></p>\n<h4 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h4><p>Vue.js 2.1.0 新增了两个属性：</p>\n<ul>\n<li>include</li>\n<li>exclude</li>\n</ul>\n<blockquote>\n<p><code>include</code> 和 <code>exclude</code> 属性允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 逗号分隔字符串 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">include</span>=<span class=\"string\">\"a,b\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 正则表达式 (使用 `v-bind`) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">\"/a|b/\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 数组 (使用 `v-bind`) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">\"['a', 'b']\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>匹配首先检查组件自身的 <code>name</code> 选项，如果 <code>name</code> 选项不可用，则匹配它的局部注册名称 (父组件 <code>components</code> 选项的键值)。匿名组件不能被匹配。</p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>还是看vue-music中的代码，如果只想缓存两个组件的话，可以这样做：</p>\n<p>先为每个组件添加 <code>name</code> 属性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'recommend'</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在 <code>keep-alive</code> 中添加要缓存的组件名：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">\"['recommend', 'search']\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-view</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>看效果：<br><img src=\"/images/keep_alive3.gif\" style=\"display: inline-block !important\"><br>只有歌手和排行页面在每次切换时会再次进行网络请求，推荐和搜索在首次加载后进行了缓存。<br>这里我使用了数组的形式传递，当然使用正则表达式匹配也是没有问题的。<br>但是使用字符串格式进行匹配，只会对第一个组件进行缓存：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">include</span>=<span class=\"string\">\"recommend, search\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-view</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>尚未确定到底是什么问题。</p>\n<p><code>exclude</code> 属性顾名思义，匹配到的组件是不进行缓存的。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjj8g104q0007kouojdr31wn3","category_id":"cjj8g104n0004kouoon511mue","_id":"cjj8g1050000dkouopynwm6ce"},{"post_id":"cjj8g104c0000kouo0qn3hzd2","category_id":"cjj8g104n0004kouoon511mue","_id":"cjj8g1052000hkouoz96l6wuz"},{"post_id":"cjj8g104t0008kouooz8lu78m","category_id":"cjj8g104n0004kouoon511mue","_id":"cjj8g1052000jkouoyp7z05nn"},{"post_id":"cjj8g104y000ckouo05g86m1k","category_id":"cjj8g104n0004kouoon511mue","_id":"cjj8g1053000lkouot5hk34xo"},{"post_id":"cjj8g104i0002kouoc79lzxre","category_id":"cjj8g104n0004kouoon511mue","_id":"cjj8g1053000mkouof9yqrvjn"},{"post_id":"cjj8g104p0006kouo0rpoi2d2","category_id":"cjj8g104n0004kouoon511mue","_id":"cjj8g1054000okouog8seug06"}],"PostTag":[{"post_id":"cjj8g104c0000kouo0qn3hzd2","tag_id":"cjj8g104o0005kouongxckvex","_id":"cjj8g104x000bkouood28shx6"},{"post_id":"cjj8g104y000ckouo05g86m1k","tag_id":"cjj8g104o0005kouongxckvex","_id":"cjj8g1052000gkouoa5ux4hr7"},{"post_id":"cjj8g104i0002kouoc79lzxre","tag_id":"cjj8g104o0005kouongxckvex","_id":"cjj8g1052000ikouou2908vnz"},{"post_id":"cjj8g104p0006kouo0rpoi2d2","tag_id":"cjj8g1051000fkouo98yrvivd","_id":"cjj8g1054000pkouou359784g"},{"post_id":"cjj8g104p0006kouo0rpoi2d2","tag_id":"cjj8g1053000kkouocsqm75yz","_id":"cjj8g1055000qkouo93tmt3qf"},{"post_id":"cjj8g104q0007kouojdr31wn3","tag_id":"cjj8g1051000fkouo98yrvivd","_id":"cjj8g1055000skouokgftssri"},{"post_id":"cjj8g104t0008kouooz8lu78m","tag_id":"cjj8g1051000fkouo98yrvivd","_id":"cjj8g1056000tkouoku1x3wf5"}],"Tag":[{"name":"Vue.js","_id":"cjj8g104o0005kouongxckvex"},{"name":"Javascript","_id":"cjj8g1051000fkouo98yrvivd"},{"name":"encodeURI","_id":"cjj8g1053000kkouocsqm75yz"}]}}